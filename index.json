{
  "api/Downlink.AzureStorage.AzureStorage.html": {
    "href": "api/Downlink.AzureStorage.AzureStorage.html",
    "title": "Class AzureStorage | Downlink",
    "keywords": "Class AzureStorage Inheritance System.Object AzureStorage Namespace : Downlink.AzureStorage Assembly : Downlink.AzureStorage.dll Syntax public class AzureStorage : object, IRemoteStorage Constructors | Improve this Doc View Source AzureStorage(IConfiguration, ILogger<AzureStorage>, IEnumerable<IPatternMatcher>, IEnumerable<AzureMatchStrategy>) Declaration public AzureStorage(IConfiguration configuration, ILogger<AzureStorage> logger, IEnumerable<IPatternMatcher> matchers, IEnumerable<AzureMatchStrategy> strategies) Parameters Type Name Description IConfiguration configuration ILogger < AzureStorage > logger IEnumerable < IPatternMatcher > matchers IEnumerable < AzureMatchStrategy > strategies Properties | Improve this Doc View Source Account Declaration public CloudStorageAccount Account { get; } Property Value Type Description CloudStorageAccount | Improve this Doc View Source Client Declaration public CloudBlobClient Client { get; } Property Value Type Description CloudBlobClient | Improve this Doc View Source Name Declaration public string Name { get; } Property Value Type Description System.String Methods | Improve this Doc View Source GetFileAsync(VersionSpec) Declaration public Task<IFileSource> GetFileAsync(VersionSpec version) Parameters Type Name Description VersionSpec version Returns Type Description Task < IFileSource > Extension Methods ReflectionExtensions.IsAssignableTo<TTarget>(Object)"
  },
  "api/Downlink.AzureStorage.ServiceCollectionExtensions.html": {
    "href": "api/Downlink.AzureStorage.ServiceCollectionExtensions.html",
    "title": "Class ServiceCollectionExtensions | Downlink",
    "keywords": "Class ServiceCollectionExtensions Inheritance System.Object ServiceCollectionExtensions Namespace : Downlink.AzureStorage Assembly : Downlink.AzureStorage.dll Syntax public static class ServiceCollectionExtensions : object Methods | Improve this Doc View Source AddAzureStorage(IServiceCollection) Declaration public static IServiceCollection AddAzureStorage(this IServiceCollection services) Parameters Type Name Description IServiceCollection services Returns Type Description IServiceCollection"
  },
  "api/Downlink.AzureStorage.Strategies.AzureMatchStrategy.html": {
    "href": "api/Downlink.AzureStorage.Strategies.AzureMatchStrategy.html",
    "title": "Class AzureMatchStrategy | Downlink",
    "keywords": "Class AzureMatchStrategy Inheritance System.Object AzureMatchStrategy Namespace : Downlink.AzureStorage.Strategies Assembly : Downlink.AzureStorage.dll Syntax public abstract class AzureMatchStrategy : object, IMatchStrategy<IListBlobItem> Constructors | Improve this Doc View Source AzureMatchStrategy(String) Declaration protected AzureMatchStrategy(string name) Parameters Type Name Description System.String name Properties | Improve this Doc View Source Name Declaration public string Name { get; } Property Value Type Description System.String Methods | Improve this Doc View Source MatchAsync(IEnumerable<IListBlobItem>, VersionSpec) Declaration public abstract Task<IFileSource> MatchAsync(IEnumerable<IListBlobItem> items, VersionSpec version) Parameters Type Name Description IEnumerable < IListBlobItem > items VersionSpec version Returns Type Description Task < IFileSource > Extension Methods ReflectionExtensions.IsAssignableTo<TTarget>(Object)"
  },
  "api/Downlink.AzureStorage.html": {
    "href": "api/Downlink.AzureStorage.html",
    "title": "Namespace Downlink.AzureStorage | Downlink",
    "keywords": "Namespace Downlink.AzureStorage Classes AzureStorage AzureStorageExtensions AzureStorageFileSource ServiceCollectionExtensions"
  },
  "api/Downlink.Composition.IDownlinkPlugin.html": {
    "href": "api/Downlink.Composition.IDownlinkPlugin.html",
    "title": "Interface IDownlinkPlugin | Downlink",
    "keywords": "Interface IDownlinkPlugin Namespace : Downlink.Composition Assembly : Downlink.dll Syntax public interface IDownlinkPlugin Methods | Improve this Doc View Source AddServices(IDownlinkBuilder) Declaration void AddServices(IDownlinkBuilder builder) Parameters Type Name Description IDownlinkBuilder builder Extension Methods ReflectionExtensions.IsAssignableTo<TTarget>(Object)"
  },
  "api/Downlink.Composition.IPluginScanner.html": {
    "href": "api/Downlink.Composition.IPluginScanner.html",
    "title": "Interface IPluginScanner | Downlink",
    "keywords": "Interface IPluginScanner Namespace : Downlink.Composition Assembly : Downlink.dll Syntax public interface IPluginScanner Methods | Improve this Doc View Source LoadModulesFromAssemblies(IEnumerable<Assembly>) Declaration IEnumerable<Type> LoadModulesFromAssemblies(IEnumerable<Assembly> assemblies) Parameters Type Name Description IEnumerable < Assembly > assemblies Returns Type Description IEnumerable < Type > Extension Methods ReflectionExtensions.IsAssignableTo<TTarget>(Object)"
  },
  "api/Downlink.Composition.PluginScanner.html": {
    "href": "api/Downlink.Composition.PluginScanner.html",
    "title": "Class PluginScanner | Downlink",
    "keywords": "Class PluginScanner Inheritance System.Object PluginScanner Namespace : Downlink.Composition Assembly : Downlink.Host.dll Syntax public class PluginScanner : object, IPluginScanner Constructors | Improve this Doc View Source PluginScanner() Declaration public PluginScanner() Methods | Improve this Doc View Source LoadModulesFromAssemblies(IEnumerable<Assembly>) Declaration public IEnumerable<Type> LoadModulesFromAssemblies(IEnumerable<Assembly> assemblies) Parameters Type Name Description IEnumerable < Assembly > assemblies Returns Type Description IEnumerable < Type > Extension Methods ReflectionExtensions.IsAssignableTo<TTarget>(Object)"
  },
  "api/Downlink.Controllers.ApiController.GoneResult.html": {
    "href": "api/Downlink.Controllers.ApiController.GoneResult.html",
    "title": "Class ApiController.GoneResult | Downlink",
    "keywords": "Class ApiController.GoneResult Inheritance System.Object ApiController.GoneResult Namespace : Downlink.Controllers Assembly : Downlink.dll Syntax protected class GoneResult : IActionResult Methods | Improve this Doc View Source ExecuteResultAsync(ActionContext) Declaration public Task ExecuteResultAsync(ActionContext context) Parameters Type Name Description ActionContext context Returns Type Description Task Extension Methods ReflectionExtensions.IsAssignableTo<TTarget>(Object)"
  },
  "api/Downlink.Controllers.DownlinkController.html": {
    "href": "api/Downlink.Controllers.DownlinkController.html",
    "title": "Class DownlinkController | Downlink",
    "keywords": "Class DownlinkController Inheritance System.Object ApiController DownlinkController Inherited Members ApiController.Mediator ApiController.Gone() Namespace : Downlink.Controllers Assembly : Downlink.dll Syntax public class DownlinkController : ApiController Constructors | Improve this Doc View Source DownlinkController(IConfiguration, IHostingEnvironment, MediatR.IMediator, IResponseHandler, ILogger<DownlinkController>) Declaration public DownlinkController(IConfiguration config, IHostingEnvironment env, MediatR.IMediator mediator, IResponseHandler handler, ILogger<DownlinkController> logger) Parameters Type Name Description IConfiguration config IHostingEnvironment env MediatR.IMediator mediator IResponseHandler handler ILogger < DownlinkController > logger Properties | Improve this Doc View Source Handler Declaration public IResponseHandler Handler { get; } Property Value Type Description IResponseHandler Methods | Improve this Doc View Source GetDownloadAsync(String, String, String, String) Declaration public Task<IActionResult> GetDownloadAsync(string version, string platform, string arch, string format) Parameters Type Name Description System.String version System.String platform System.String arch System.String format Returns Type Description Task < IActionResult > | Improve this Doc View Source GetInfo() Declaration public IActionResult GetInfo() Returns Type Description IActionResult Extension Methods ReflectionExtensions.IsAssignableTo<TTarget>(Object)"
  },
  "api/Downlink.Controllers.html": {
    "href": "api/Downlink.Controllers.html",
    "title": "Namespace Downlink.Controllers | Downlink",
    "keywords": "Namespace Downlink.Controllers Classes ApiController ApiController.GoneResult DownlinkController"
  },
  "api/Downlink.Core.Diagnostics.NotFoundException.html": {
    "href": "api/Downlink.Core.Diagnostics.NotFoundException.html",
    "title": "Class NotFoundException | Downlink",
    "keywords": "Class NotFoundException Inheritance System.Object NotFoundException ArchitectureNotFoundException PlatformNotFoundException VersionNotFoundException Namespace : Downlink.Core.Diagnostics Assembly : Downlink.Core.dll Syntax public abstract class NotFoundException : System.Exception Constructors | Improve this Doc View Source NotFoundException() Declaration protected NotFoundException() | Improve this Doc View Source NotFoundException(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) Declaration protected NotFoundException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) Parameters Type Name Description System.Runtime.Serialization.SerializationInfo info System.Runtime.Serialization.StreamingContext context | Improve this Doc View Source NotFoundException(String) Declaration protected NotFoundException(string message) Parameters Type Name Description System.String message | Improve this Doc View Source NotFoundException(String, System.Exception) Declaration protected NotFoundException(string message, System.Exception inner) Parameters Type Name Description System.String message System.Exception inner Extension Methods ReflectionExtensions.IsAssignableTo<TTarget>(Object)"
  },
  "api/Downlink.Core.Diagnostics.PlatformNotFoundException.html": {
    "href": "api/Downlink.Core.Diagnostics.PlatformNotFoundException.html",
    "title": "Class PlatformNotFoundException | Downlink",
    "keywords": "Class PlatformNotFoundException Inheritance System.Object NotFoundException PlatformNotFoundException Namespace : Downlink.Core.Diagnostics Assembly : Downlink.Core.dll Syntax public class PlatformNotFoundException : NotFoundException Constructors | Improve this Doc View Source PlatformNotFoundException() Declaration public PlatformNotFoundException() | Improve this Doc View Source PlatformNotFoundException(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) Declaration protected PlatformNotFoundException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) Parameters Type Name Description System.Runtime.Serialization.SerializationInfo info System.Runtime.Serialization.StreamingContext context | Improve this Doc View Source PlatformNotFoundException(String) Declaration public PlatformNotFoundException(string message) Parameters Type Name Description System.String message | Improve this Doc View Source PlatformNotFoundException(String, System.Exception) Declaration public PlatformNotFoundException(string message, System.Exception inner) Parameters Type Name Description System.String message System.Exception inner Extension Methods ReflectionExtensions.IsAssignableTo<TTarget>(Object)"
  },
  "api/Downlink.Core.Diagnostics.html": {
    "href": "api/Downlink.Core.Diagnostics.html",
    "title": "Namespace Downlink.Core.Diagnostics | Downlink",
    "keywords": "Namespace Downlink.Core.Diagnostics Classes ArchitectureNotFoundException NotFoundException PlatformNotFoundException VersionNotFoundException VersionParseException"
  },
  "api/Downlink.Core.FileMetadata.html": {
    "href": "api/Downlink.Core.FileMetadata.html",
    "title": "Class FileMetadata | Downlink",
    "keywords": "Class FileMetadata Inheritance System.Object FileMetadata Namespace : Downlink.Core Assembly : Downlink.Core.dll Syntax public class FileMetadata : object Constructors | Improve this Doc View Source FileMetadata(Double, String) Declaration public FileMetadata(double sizeinBytes, string fileName) Parameters Type Name Description System.Double sizeinBytes System.String fileName Properties | Improve this Doc View Source FileName Declaration public string FileName { get; } Property Value Type Description System.String | Improve this Doc View Source Public Declaration public bool Public { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source SizeInBytes Declaration public double SizeInBytes { get; } Property Value Type Description System.Double Extension Methods ReflectionExtensions.IsAssignableTo<TTarget>(Object)"
  },
  "api/Downlink.Core.IO.Path.html": {
    "href": "api/Downlink.Core.IO.Path.html",
    "title": "Class Path | Downlink",
    "keywords": "Class Path Inheritance System.Object Path Namespace : Downlink.Core.IO Assembly : Downlink.Core.dll Syntax public class Path : object Constructors | Improve this Doc View Source Path(String) Initializes a new instance of the Path class. Declaration protected Path(string path) Parameters Type Name Description System.String path The path. Properties | Improve this Doc View Source FullPath Gets the full path. Declaration public string FullPath { get; } Property Value Type Description System.String The full path. | Improve this Doc View Source IsRelative Gets a value indicating whether this path is relative. Declaration public bool IsRelative { get; } Property Value Type Description System.Boolean true if this path is relative; otherwise, false . | Improve this Doc View Source Segments Gets the segments making up the path. Declaration public string[] Segments { get; } Property Value Type Description System.String [] The segments making up the path. Methods | Improve this Doc View Source Collapse() Collapses a Path containing ellipses. Declaration public Path Collapse() Returns Type Description Path A collapsed Path . | Improve this Doc View Source GetDirectory() Gets the directory part of the path. Declaration public Path GetDirectory() Returns Type Description Path The directory part of the path. | Improve this Doc View Source GetFilename() Gets the filename. Declaration public string GetFilename() Returns Type Description System.String The filename. | Improve this Doc View Source GetFilenameWithoutExtension() Gets the filename without its extension. Declaration public string GetFilenameWithoutExtension() Returns Type Description System.String The filename without its extension. | Improve this Doc View Source Normalize() Declaration public void Normalize() | Improve this Doc View Source ToString() Returns a string that represents this path. Declaration public override string ToString() Returns Type Description System.String A string that represents this instance. Operators | Improve this Doc View Source Implicit(Path to String) Declaration public static implicit operator string (Path p) Parameters Type Name Description Path p Returns Type Description System.String | Improve this Doc View Source Implicit(String to Path) Performs an implicit conversion from a string to Path . Declaration public static implicit operator Path(string path) Parameters Type Name Description System.String path The path. Returns Type Description Path A Path . Extension Methods ReflectionExtensions.IsAssignableTo<TTarget>(Object)"
  },
  "api/Downlink.Core.IO.html": {
    "href": "api/Downlink.Core.IO.html",
    "title": "Namespace Downlink.Core.IO | Downlink",
    "keywords": "Namespace Downlink.Core.IO Classes Path"
  },
  "api/Downlink.Core.IStreamingStorage.html": {
    "href": "api/Downlink.Core.IStreamingStorage.html",
    "title": "Interface IStreamingStorage | Downlink",
    "keywords": "Interface IStreamingStorage Namespace : Downlink.Core Assembly : Downlink.Core.dll Syntax public interface IStreamingStorage Methods | Improve this Doc View Source GetFile(VersionSpec) Declaration IFileSource GetFile(VersionSpec version) Parameters Type Name Description VersionSpec version Returns Type Description IFileSource | Improve this Doc View Source GetFileContents(VersionSpec) Declaration Stream GetFileContents(VersionSpec version) Parameters Type Name Description VersionSpec version Returns Type Description Stream Extension Methods ReflectionExtensions.IsAssignableTo<TTarget>(Object)"
  },
  "api/Downlink.Core.Runtime.FlatPatternMatcher.html": {
    "href": "api/Downlink.Core.Runtime.FlatPatternMatcher.html",
    "title": "Class FlatPatternMatcher | Downlink",
    "keywords": "Class FlatPatternMatcher Inheritance System.Object FlatPatternMatcher Namespace : Downlink.Core.Runtime Assembly : Downlink.Core.dll Syntax public class FlatPatternMatcher : object, IPatternMatcher Properties | Improve this Doc View Source Name Declaration public string Name { get; } Property Value Type Description System.String Implements IPatternMatcher.Name Methods | Improve this Doc View Source Match(Path, VersionSpec) Declaration public bool Match(Path path, VersionSpec version) Parameters Type Name Description Path path VersionSpec version Returns Type Description System.Boolean Implements IPatternMatcher.Match(Path, VersionSpec) Extension Methods ReflectionExtensions.IsAssignableTo<TTarget>(Object)"
  },
  "api/Downlink.Core.Runtime.HierarchicalPatternMatcher.html": {
    "href": "api/Downlink.Core.Runtime.HierarchicalPatternMatcher.html",
    "title": "Class HierarchicalPatternMatcher | Downlink",
    "keywords": "Class HierarchicalPatternMatcher Inheritance System.Object HierarchicalPatternMatcher Namespace : Downlink.Core.Runtime Assembly : Downlink.Core.dll Syntax public class HierarchicalPatternMatcher : object, IPatternMatcher Constructors | Improve this Doc View Source HierarchicalPatternMatcher(Boolean) Declaration public HierarchicalPatternMatcher(bool forceNameMatching = false) Parameters Type Name Description System.Boolean forceNameMatching Properties | Improve this Doc View Source Name Declaration public string Name { get; } Property Value Type Description System.String Implements IPatternMatcher.Name Methods | Improve this Doc View Source Match(Path, VersionSpec) Declaration public bool Match(Path path, VersionSpec version) Parameters Type Name Description Path path VersionSpec version Returns Type Description System.Boolean Implements IPatternMatcher.Match(Path, VersionSpec) Extension Methods ReflectionExtensions.IsAssignableTo<TTarget>(Object)"
  },
  "api/Downlink.Core.Runtime.RuntimePatternMatcher.html": {
    "href": "api/Downlink.Core.Runtime.RuntimePatternMatcher.html",
    "title": "Class RuntimePatternMatcher | Downlink",
    "keywords": "Class RuntimePatternMatcher Inheritance System.Object RuntimePatternMatcher Namespace : Downlink.Core.Runtime Assembly : Downlink.Core.dll Syntax public class RuntimePatternMatcher : object, IPatternMatcher Constructors | Improve this Doc View Source RuntimePatternMatcher(Boolean) Declaration public RuntimePatternMatcher(bool forceNameMatching = false) Parameters Type Name Description System.Boolean forceNameMatching Properties | Improve this Doc View Source Name Declaration public string Name { get; } Property Value Type Description System.String Implements IPatternMatcher.Name Methods | Improve this Doc View Source Match(Path, VersionSpec) Declaration public bool Match(Path path, VersionSpec version) Parameters Type Name Description Path path VersionSpec version Returns Type Description System.Boolean Implements IPatternMatcher.Match(Path, VersionSpec) Extension Methods ReflectionExtensions.IsAssignableTo<TTarget>(Object)"
  },
  "api/Downlink.Core.html": {
    "href": "api/Downlink.Core.html",
    "title": "Namespace Downlink.Core | Downlink",
    "keywords": "Namespace Downlink.Core Classes CollectionExtensions FileMetadata VersionSpec Interfaces IFileSource IMatchStrategy<TObject> IPatternMatcher IRemoteStorage IStreamingStorage"
  },
  "api/Downlink.GitHub.ConfigurationExtensions.html": {
    "href": "api/Downlink.GitHub.ConfigurationExtensions.html",
    "title": "Class ConfigurationExtensions | Downlink",
    "keywords": "Class ConfigurationExtensions Inheritance System.Object ConfigurationExtensions Namespace : Downlink.GitHub Assembly : Downlink.GitHub.dll Syntax public static class ConfigurationExtensions : object"
  },
  "api/Downlink.GitHub.GitHubCredentials.html": {
    "href": "api/Downlink.GitHub.GitHubCredentials.html",
    "title": "Class GitHubCredentials | Downlink",
    "keywords": "Class GitHubCredentials Inheritance System.Object GitHubCredentials Namespace : Downlink.GitHub Assembly : Downlink.GitHub.dll Syntax public class GitHubCredentials : object Constructors | Improve this Doc View Source GitHubCredentials(String, String) Declaration public GitHubCredentials(string apiToken, string repoId) Parameters Type Name Description System.String apiToken System.String repoId Properties | Improve this Doc View Source Owner Declaration public string Owner { get; } Property Value Type Description System.String | Improve this Doc View Source Repo Declaration public string Repo { get; } Property Value Type Description System.String | Improve this Doc View Source Token Declaration public string Token { get; } Property Value Type Description System.String Extension Methods ReflectionExtensions.IsAssignableTo<TTarget>(Object)"
  },
  "api/Downlink.GitHub.GitHubFileSource.html": {
    "href": "api/Downlink.GitHub.GitHubFileSource.html",
    "title": "Class GitHubFileSource | Downlink",
    "keywords": "Class GitHubFileSource Inheritance System.Object GitHubFileSource Namespace : Downlink.GitHub Assembly : Downlink.GitHub.dll Syntax public class GitHubFileSource : object, IFileSource Properties | Improve this Doc View Source Available Declaration public bool Available { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source FileUri Declaration public Uri FileUri { get; } Property Value Type Description Uri | Improve this Doc View Source Metadata Declaration public FileMetadata Metadata { get; } Property Value Type Description FileMetadata Implements IFileSource.Metadata | Improve this Doc View Source Version Declaration public VersionSpec Version { get; set; } Property Value Type Description VersionSpec Implements IFileSource.Version Extension Methods ReflectionExtensions.IsAssignableTo<TTarget>(Object)"
  },
  "api/Downlink.GitHub.OctokitClient.html": {
    "href": "api/Downlink.GitHub.OctokitClient.html",
    "title": "Class OctokitClient | Downlink",
    "keywords": "Class OctokitClient Inheritance System.Object OctokitClient Namespace : Downlink.GitHub Assembly : Downlink.GitHub.dll Syntax public class OctokitClient : object, IGitHubClient, IRemoteStorage Constructors | Improve this Doc View Source OctokitClient(GitHubCredentials, IConfiguration, IEnumerable<GitHubMatchStrategy>, IEnumerable<IPatternMatcher>) Declaration public OctokitClient(GitHubCredentials credentials, IConfiguration configuration, IEnumerable<GitHubMatchStrategy> matchStrategies, IEnumerable<IPatternMatcher> patternMatchers) Parameters Type Name Description GitHubCredentials credentials IConfiguration configuration IEnumerable < GitHubMatchStrategy > matchStrategies IEnumerable < IPatternMatcher > patternMatchers Properties | Improve this Doc View Source Client Declaration public GitHubClient Client { get; } Property Value Type Description GitHubClient | Improve this Doc View Source Name Declaration public string Name { get; } Property Value Type Description System.String Methods | Improve this Doc View Source GetAllVersions() Declaration public Task<IEnumerable<VersionSpec>> GetAllVersions() Returns Type Description Task < IEnumerable < VersionSpec >> | Improve this Doc View Source GetFileAsync(VersionSpec) Declaration public Task<IFileSource> GetFileAsync(VersionSpec version) Parameters Type Name Description VersionSpec version Returns Type Description Task < IFileSource > Extension Methods ReflectionExtensions.IsAssignableTo<TTarget>(Object)"
  },
  "api/Downlink.GitHub.ServiceCollectionExtensions.html": {
    "href": "api/Downlink.GitHub.ServiceCollectionExtensions.html",
    "title": "Class ServiceCollectionExtensions | Downlink",
    "keywords": "Class ServiceCollectionExtensions Inheritance System.Object ServiceCollectionExtensions Namespace : Downlink.GitHub Assembly : Downlink.GitHub.dll Syntax public static class ServiceCollectionExtensions : object Methods | Improve this Doc View Source AddGitHubReleaseStorage(IServiceCollection) Declaration public static IServiceCollection AddGitHubReleaseStorage(this IServiceCollection services) Parameters Type Name Description IServiceCollection services Returns Type Description IServiceCollection"
  },
  "api/Downlink.GitHub.html": {
    "href": "api/Downlink.GitHub.html",
    "title": "Namespace Downlink.GitHub | Downlink",
    "keywords": "Namespace Downlink.GitHub Classes ConfigurationExtensions CredentialFactory FlatMatchStrategy GitHubCredentials GitHubFileSource GitHubMatchStrategy OctokitClient ServiceCollectionExtensions Interfaces IGitHubClient"
  },
  "api/Downlink.Handlers.FileSchemeClient.html": {
    "href": "api/Downlink.Handlers.FileSchemeClient.html",
    "title": "Class FileSchemeClient | Downlink",
    "keywords": "Class FileSchemeClient Inheritance System.Object SchemeClient FileSchemeClient Inherited Members SchemeClient.Schemes Namespace : Downlink.Handlers Assembly : Downlink.dll Syntax public class FileSchemeClient : SchemeClient, ISchemeClient Constructors | Improve this Doc View Source FileSchemeClient() Declaration public FileSchemeClient() Methods | Improve this Doc View Source GetContentAsync(IFileSource) Declaration public override Task<IActionResult> GetContentAsync(IFileSource file) Parameters Type Name Description IFileSource file Returns Type Description Task < IActionResult > Overrides SchemeClient.GetContentAsync(IFileSource) Extension Methods ReflectionExtensions.IsAssignableTo<TTarget>(Object)"
  },
  "api/Downlink.Handlers.RedirectingResponseHandler.html": {
    "href": "api/Downlink.Handlers.RedirectingResponseHandler.html",
    "title": "Class RedirectingResponseHandler | Downlink",
    "keywords": "Class RedirectingResponseHandler Inheritance System.Object ResponseHandler RedirectingResponseHandler Inherited Members ResponseHandler.AdditionalClients ResponseHandler.HandleUnknownAsync(IFileSource) Namespace : Downlink.Handlers Assembly : Downlink.dll Syntax public class RedirectingResponseHandler : ResponseHandler, IResponseHandler Constructors | Improve this Doc View Source RedirectingResponseHandler(IEnumerable<ISchemeClient>) Declaration public RedirectingResponseHandler(IEnumerable<ISchemeClient> additionalClients) Parameters Type Name Description IEnumerable < ISchemeClient > additionalClients Methods | Improve this Doc View Source HandleAsync(IFileSource) Declaration public override Task<IActionResult> HandleAsync(IFileSource file) Parameters Type Name Description IFileSource file Returns Type Description Task < IActionResult > Overrides ResponseHandler.HandleAsync(IFileSource) Extension Methods ReflectionExtensions.IsAssignableTo<TTarget>(Object)"
  },
  "api/Downlink.Handlers.ResponseHandler.html": {
    "href": "api/Downlink.Handlers.ResponseHandler.html",
    "title": "Class ResponseHandler | Downlink",
    "keywords": "Class ResponseHandler Inheritance System.Object ResponseHandler ProxyingResponseHandler RedirectingResponseHandler Namespace : Downlink.Handlers Assembly : Downlink.dll Syntax public abstract class ResponseHandler : object, IResponseHandler Constructors | Improve this Doc View Source ResponseHandler(IEnumerable<ISchemeClient>) Declaration protected ResponseHandler(IEnumerable<ISchemeClient> additionalClients) Parameters Type Name Description IEnumerable < ISchemeClient > additionalClients Properties | Improve this Doc View Source AdditionalClients Declaration protected IEnumerable<ISchemeClient> AdditionalClients { get; } Property Value Type Description IEnumerable < ISchemeClient > Methods | Improve this Doc View Source HandleAsync(IFileSource) Declaration public abstract Task<IActionResult> HandleAsync(IFileSource file) Parameters Type Name Description IFileSource file Returns Type Description Task < IActionResult > Implements IResponseHandler.HandleAsync(IFileSource) | Improve this Doc View Source HandleUnknownAsync(IFileSource) Declaration protected Task<IActionResult> HandleUnknownAsync(IFileSource file) Parameters Type Name Description IFileSource file Returns Type Description Task < IActionResult > Extension Methods ReflectionExtensions.IsAssignableTo<TTarget>(Object)"
  },
  "api/Downlink.Handlers.SchemeClient.html": {
    "href": "api/Downlink.Handlers.SchemeClient.html",
    "title": "Class SchemeClient | Downlink",
    "keywords": "Class SchemeClient Inheritance System.Object SchemeClient FileSchemeClient HttpDownloadClient Namespace : Downlink.Handlers Assembly : Downlink.dll Syntax public abstract class SchemeClient : object, ISchemeClient Constructors | Improve this Doc View Source SchemeClient(IEnumerable<String>) Declaration protected SchemeClient(IEnumerable<string> schemes) Parameters Type Name Description IEnumerable < System.String > schemes | Improve this Doc View Source SchemeClient(String) Declaration protected SchemeClient(string scheme) Parameters Type Name Description System.String scheme Properties | Improve this Doc View Source Schemes Declaration public IEnumerable<string> Schemes { get; } Property Value Type Description IEnumerable < System.String > Implements ISchemeClient.Schemes Methods | Improve this Doc View Source GetContentAsync(IFileSource) Declaration public abstract Task<IActionResult> GetContentAsync(IFileSource file) Parameters Type Name Description IFileSource file Returns Type Description Task < IActionResult > Implements ISchemeClient.GetContentAsync(IFileSource) Extension Methods ReflectionExtensions.IsAssignableTo<TTarget>(Object)"
  },
  "api/Downlink.Handlers.html": {
    "href": "api/Downlink.Handlers.html",
    "title": "Namespace Downlink.Handlers | Downlink",
    "keywords": "Namespace Downlink.Handlers Classes FileSchemeClient HttpDownloadClient ProxyingResponseHandler RedirectingResponseHandler ResponseHandler SchemeClient Interfaces IResponseHandler ISchemeClient This interface is intended as an extension point to support storage backends that return unsupported URI schemes."
  },
  "api/Downlink.Hosting.IDownlinkBuilder.html": {
    "href": "api/Downlink.Hosting.IDownlinkBuilder.html",
    "title": "Interface IDownlinkBuilder | Downlink",
    "keywords": "Interface IDownlinkBuilder Namespace : Downlink.Hosting Assembly : Downlink.dll Syntax public interface IDownlinkBuilder Properties | Improve this Doc View Source Services Declaration IServiceCollection Services { get; } Property Value Type Description IServiceCollection Methods | Improve this Doc View Source Build() Declaration void Build() Extension Methods IDownlinkBuilderExtensions.AddPatternMatcher<T>(IDownlinkBuilder) IDownlinkBuilderExtensions.AddStorage<T>(IDownlinkBuilder) IDownlinkBuilderExtensions.AddResponseHandler<T>(IDownlinkBuilder) IDownlinkBuilderExtensions.AddSchemeClient<T>(IDownlinkBuilder) IDownlinkBuilderExtensions.AddResponseAction(IDownlinkBuilder, Action<AppVersionResponseModel>) IDownlinkBuilderExtensions.AddNotificationHandler<T>(IDownlinkBuilder) IDownlinkBuilderExtensions.AddPlugin<T>(IDownlinkBuilder) IDownlinkBuilderExtensions.AddPlugin(IDownlinkBuilder, Type[]) ReflectionExtensions.IsAssignableTo<TTarget>(Object)"
  },
  "api/Downlink.Hosting.IDownlinkBuilderExtensions.html": {
    "href": "api/Downlink.Hosting.IDownlinkBuilderExtensions.html",
    "title": "Class IDownlinkBuilderExtensions | Downlink",
    "keywords": "Class IDownlinkBuilderExtensions Inheritance System.Object IDownlinkBuilderExtensions Namespace : Downlink.Hosting Assembly : Downlink.dll Syntax public static class IDownlinkBuilderExtensions : object Methods | Improve this Doc View Source AddNotificationHandler<T>(IDownlinkBuilder) Declaration public static IDownlinkBuilder AddNotificationHandler<T>(this IDownlinkBuilder builder)where T : class, MediatR.INotificationHandler<AppVersionResponseModel> Parameters Type Name Description IDownlinkBuilder builder Returns Type Description IDownlinkBuilder Type Parameters Name Description T | Improve this Doc View Source AddPatternMatcher<T>(IDownlinkBuilder) Declaration public static IDownlinkBuilder AddPatternMatcher<T>(this IDownlinkBuilder builder)where T : class, IPatternMatcher Parameters Type Name Description IDownlinkBuilder builder Returns Type Description IDownlinkBuilder Type Parameters Name Description T | Improve this Doc View Source AddPlugin(IDownlinkBuilder, Type[]) Declaration public static IDownlinkBuilder AddPlugin(this IDownlinkBuilder builder, params Type[] pluginType) Parameters Type Name Description IDownlinkBuilder builder Type [] pluginType Returns Type Description IDownlinkBuilder | Improve this Doc View Source AddPlugin<T>(IDownlinkBuilder) Declaration public static IDownlinkBuilder AddPlugin<T>(this IDownlinkBuilder builder)where T : class, IDownlinkPlugin Parameters Type Name Description IDownlinkBuilder builder Returns Type Description IDownlinkBuilder Type Parameters Name Description T | Improve this Doc View Source AddResponseAction(IDownlinkBuilder, Action<AppVersionResponseModel>) Declaration public static IDownlinkBuilder AddResponseAction(this IDownlinkBuilder builder, Action<AppVersionResponseModel> response) Parameters Type Name Description IDownlinkBuilder builder Action < AppVersionResponseModel > response Returns Type Description IDownlinkBuilder | Improve this Doc View Source AddResponseHandler<T>(IDownlinkBuilder) Declaration public static IDownlinkBuilder AddResponseHandler<T>(this IDownlinkBuilder builder)where T : class, IResponseHandler Parameters Type Name Description IDownlinkBuilder builder Returns Type Description IDownlinkBuilder Type Parameters Name Description T | Improve this Doc View Source AddSchemeClient<T>(IDownlinkBuilder) Declaration public static IDownlinkBuilder AddSchemeClient<T>(this IDownlinkBuilder builder)where T : class, ISchemeClient Parameters Type Name Description IDownlinkBuilder builder Returns Type Description IDownlinkBuilder Type Parameters Name Description T | Improve this Doc View Source AddStorage<T>(IDownlinkBuilder) Declaration public static IDownlinkBuilder AddStorage<T>(this IDownlinkBuilder builder)where T : class, IRemoteStorage Parameters Type Name Description IDownlinkBuilder builder Returns Type Description IDownlinkBuilder Type Parameters Name Description T"
  },
  "api/Downlink.Hosting.MvcBuilderExtensions.html": {
    "href": "api/Downlink.Hosting.MvcBuilderExtensions.html",
    "title": "Class MvcBuilderExtensions | Downlink",
    "keywords": "Class MvcBuilderExtensions Inheritance System.Object MvcBuilderExtensions Namespace : Downlink.Hosting Assembly : Downlink.dll Syntax public static class MvcBuilderExtensions : object Methods | Improve this Doc View Source AddDownlink(IMvcBuilder) Declaration public static IMvcBuilder AddDownlink(this IMvcBuilder builder) Parameters Type Name Description IMvcBuilder builder Returns Type Description IMvcBuilder | Improve this Doc View Source AddDownlink(IMvcBuilder, Action<IDownlinkBuilder>) Declaration public static IMvcBuilder AddDownlink(this IMvcBuilder builder, Action<IDownlinkBuilder> opts) Parameters Type Name Description IMvcBuilder builder Action < IDownlinkBuilder > opts Returns Type Description IMvcBuilder | Improve this Doc View Source AddDownlink(IMvcBuilder, Action<IDownlinkBuilder>, DownlinkBuilderOptions) Declaration public static IMvcBuilder AddDownlink(this IMvcBuilder builder, Action<IDownlinkBuilder> configure, DownlinkBuilderOptions opts) Parameters Type Name Description IMvcBuilder builder Action < IDownlinkBuilder > configure DownlinkBuilderOptions opts Returns Type Description IMvcBuilder | Improve this Doc View Source AddDownlink(IMvcBuilder, DownlinkBuilderOptions) Declaration public static IMvcBuilder AddDownlink(this IMvcBuilder builder, DownlinkBuilderOptions opts) Parameters Type Name Description IMvcBuilder builder DownlinkBuilderOptions opts Returns Type Description IMvcBuilder | Improve this Doc View Source AddDownlink(IMvcCoreBuilder) Declaration public static IMvcCoreBuilder AddDownlink(this IMvcCoreBuilder builder) Parameters Type Name Description IMvcCoreBuilder builder Returns Type Description IMvcCoreBuilder | Improve this Doc View Source AddDownlink(IMvcCoreBuilder, Action<IDownlinkBuilder>) Declaration public static IMvcCoreBuilder AddDownlink(this IMvcCoreBuilder builder, Action<IDownlinkBuilder> configure) Parameters Type Name Description IMvcCoreBuilder builder Action < IDownlinkBuilder > configure Returns Type Description IMvcCoreBuilder | Improve this Doc View Source AddDownlink(IMvcCoreBuilder, Action<IDownlinkBuilder>, DownlinkBuilderOptions) Declaration public static IMvcCoreBuilder AddDownlink(this IMvcCoreBuilder builder, Action<IDownlinkBuilder> configure, DownlinkBuilderOptions opts) Parameters Type Name Description IMvcCoreBuilder builder Action < IDownlinkBuilder > configure DownlinkBuilderOptions opts Returns Type Description IMvcCoreBuilder | Improve this Doc View Source AddDownlink(IMvcCoreBuilder, DownlinkBuilderOptions) Declaration public static IMvcCoreBuilder AddDownlink(this IMvcCoreBuilder builder, DownlinkBuilderOptions opts) Parameters Type Name Description IMvcCoreBuilder builder DownlinkBuilderOptions opts Returns Type Description IMvcCoreBuilder"
  },
  "api/Downlink.Hosting.WebHostBuilderExtensions.html": {
    "href": "api/Downlink.Hosting.WebHostBuilderExtensions.html",
    "title": "Class WebHostBuilderExtensions | Downlink",
    "keywords": "Class WebHostBuilderExtensions Inheritance System.Object WebHostBuilderExtensions Namespace : Downlink.Hosting Assembly : Downlink.dll Syntax public static class WebHostBuilderExtensions : object Methods | Improve this Doc View Source ConfigureDownlink(IWebHostBuilder) Declaration public static IWebHostBuilder ConfigureDownlink(this IWebHostBuilder builder) Parameters Type Name Description IWebHostBuilder builder Returns Type Description IWebHostBuilder"
  },
  "api/Downlink.Infrastructure.ServiceFactory.html": {
    "href": "api/Downlink.Infrastructure.ServiceFactory.html",
    "title": "Class ServiceFactory | Downlink",
    "keywords": "Class ServiceFactory Inheritance System.Object ServiceFactory Namespace : Downlink.Infrastructure Assembly : Downlink.dll Syntax public static class ServiceFactory : object"
  },
  "api/Downlink.Infrastructure.html": {
    "href": "api/Downlink.Infrastructure.html",
    "title": "Namespace Downlink.Infrastructure | Downlink",
    "keywords": "Namespace Downlink.Infrastructure Classes ConfigurationExtensions HttpClientExtensions ReflectionExtensions ServiceFactory"
  },
  "api/Downlink.Local.LocalFileMatchStrategy.html": {
    "href": "api/Downlink.Local.LocalFileMatchStrategy.html",
    "title": "Class LocalFileMatchStrategy | Downlink",
    "keywords": "Class LocalFileMatchStrategy Inheritance System.Object LocalFileMatchStrategy Namespace : Downlink.Local Assembly : Downlink.Local.dll Syntax public abstract class LocalFileMatchStrategy : object, IMatchStrategy<FileSystemInfo> Constructors | Improve this Doc View Source LocalFileMatchStrategy(String) Declaration protected LocalFileMatchStrategy(string name) Parameters Type Name Description System.String name Properties | Improve this Doc View Source Name Declaration public string Name { get; } Property Value Type Description System.String Methods | Improve this Doc View Source MatchAsync(System.Collections.Generic.IEnumerable<FileSystemInfo>, VersionSpec) Declaration public abstract Task<IFileSource> MatchAsync(System.Collections.Generic.IEnumerable<FileSystemInfo> items, VersionSpec version) Parameters Type Name Description System.Collections.Generic.IEnumerable < FileSystemInfo > items VersionSpec version Returns Type Description Task < IFileSource > Extension Methods ReflectionExtensions.IsAssignableTo<TTarget>(Object)"
  },
  "api/Downlink.Local.LocalFileSource.html": {
    "href": "api/Downlink.Local.LocalFileSource.html",
    "title": "Class LocalFileSource | Downlink",
    "keywords": "Class LocalFileSource Inheritance System.Object LocalFileSource Namespace : Downlink.Local Assembly : Downlink.Local.dll Syntax public class LocalFileSource : object, IFileSource Properties | Improve this Doc View Source Available Declaration public bool Available { get; } Property Value Type Description System.Boolean | Improve this Doc View Source FileUri Declaration public Uri FileUri { get; } Property Value Type Description Uri | Improve this Doc View Source Metadata Declaration public FileMetadata Metadata { get; set; } Property Value Type Description FileMetadata Implements IFileSource.Metadata | Improve this Doc View Source Version Declaration public VersionSpec Version { get; } Property Value Type Description VersionSpec Implements IFileSource.Version Extension Methods ReflectionExtensions.IsAssignableTo<TTarget>(Object)"
  },
  "api/Downlink.Messaging.AppVersionRequest.html": {
    "href": "api/Downlink.Messaging.AppVersionRequest.html",
    "title": "Class AppVersionRequest | Downlink",
    "keywords": "Class AppVersionRequest Inheritance System.Object AppVersionRequest Namespace : Downlink.Messaging Assembly : Downlink.dll Syntax public class AppVersionRequest : IRequest<AppVersionResponseModel> Constructors | Improve this Doc View Source AppVersionRequest(VersionSpec, String) Declaration public AppVersionRequest(VersionSpec version, string format = null) Parameters Type Name Description VersionSpec version System.String format Properties | Improve this Doc View Source Format Declaration public string Format { get; } Property Value Type Description System.String | Improve this Doc View Source Version Declaration public VersionSpec Version { get; } Property Value Type Description VersionSpec Extension Methods ReflectionExtensions.IsAssignableTo<TTarget>(Object)"
  },
  "api/Downlink.Messaging.AppVersionRequestHandler.html": {
    "href": "api/Downlink.Messaging.AppVersionRequestHandler.html",
    "title": "Class AppVersionRequestHandler | Downlink",
    "keywords": "Class AppVersionRequestHandler Inheritance System.Object AppVersionRequestHandler Namespace : Downlink.Messaging Assembly : Downlink.dll Syntax public class AppVersionRequestHandler : IAsyncRequestHandler<AppVersionRequest, AppVersionResponseModel> Constructors | Improve this Doc View Source AppVersionRequestHandler(IEnumerable<IRemoteStorage>, IConfiguration) Declaration public AppVersionRequestHandler(IEnumerable<IRemoteStorage> storage, IConfiguration config) Parameters Type Name Description IEnumerable < IRemoteStorage > storage IConfiguration config Methods | Improve this Doc View Source Handle(AppVersionRequest) Declaration public Task<AppVersionResponseModel> Handle(AppVersionRequest message) Parameters Type Name Description AppVersionRequest message Returns Type Description Task < AppVersionResponseModel > Extension Methods ReflectionExtensions.IsAssignableTo<TTarget>(Object)"
  },
  "api/Downlink.Messaging.AppVersionResponseModel.html": {
    "href": "api/Downlink.Messaging.AppVersionResponseModel.html",
    "title": "Class AppVersionResponseModel | Downlink",
    "keywords": "Class AppVersionResponseModel Inheritance System.Object AppVersionResponseModel Namespace : Downlink.Messaging Assembly : Downlink.dll Syntax public class AppVersionResponseModel : MediatR.INotification Extension Methods ReflectionExtensions.IsAssignableTo<TTarget>(Object)"
  },
  "api/Downlink.Messaging.html": {
    "href": "api/Downlink.Messaging.html",
    "title": "Namespace Downlink.Messaging | Downlink",
    "keywords": "Namespace Downlink.Messaging Classes ActionNotification AppVersionRequest AppVersionRequestHandler AppVersionResponseModel"
  },
  "api/Downlink.S3.S3MatchStrategy.html": {
    "href": "api/Downlink.S3.S3MatchStrategy.html",
    "title": "Class S3MatchStrategy | Downlink",
    "keywords": "Class S3MatchStrategy Inheritance System.Object S3MatchStrategy Namespace : Downlink.S3 Assembly : Downlink.S3.dll Syntax public abstract class S3MatchStrategy : object, IMatchStrategy<S3Object> Constructors | Improve this Doc View Source S3MatchStrategy(String) Declaration protected S3MatchStrategy(string name) Parameters Type Name Description System.String name Properties | Improve this Doc View Source Name Declaration public string Name { get; } Property Value Type Description System.String Methods | Improve this Doc View Source MatchAsync(IEnumerable<S3Object>, VersionSpec) Declaration public abstract Task<IFileSource> MatchAsync(IEnumerable<S3Object> items, VersionSpec version) Parameters Type Name Description IEnumerable < S3Object > items VersionSpec version Returns Type Description Task < IFileSource > Extension Methods ReflectionExtensions.IsAssignableTo<TTarget>(Object)"
  },
  "api/Downlink.S3.S3SearchStorage.html": {
    "href": "api/Downlink.S3.S3SearchStorage.html",
    "title": "Class S3SearchStorage | Downlink",
    "keywords": "Class S3SearchStorage Inheritance System.Object S3SearchStorage Namespace : Downlink.S3 Assembly : Downlink.S3.dll Syntax public class S3SearchStorage : object, IRemoteStorage Constructors | Improve this Doc View Source S3SearchStorage(IConfiguration, S3Configuration) Declaration public S3SearchStorage(IConfiguration configuration, S3Configuration opts) Parameters Type Name Description IConfiguration configuration S3Configuration opts Properties | Improve this Doc View Source BucketName Declaration public string BucketName { get; } Property Value Type Description System.String | Improve this Doc View Source Name Declaration public string Name { get; } Property Value Type Description System.String Methods | Improve this Doc View Source GetFileAsync(VersionSpec) Declaration public Task<IFileSource> GetFileAsync(VersionSpec version) Parameters Type Name Description VersionSpec version Returns Type Description Task < IFileSource > Extension Methods ReflectionExtensions.IsAssignableTo<TTarget>(Object)"
  },
  "api/Downlink.S3.S3Storage.html": {
    "href": "api/Downlink.S3.S3Storage.html",
    "title": "Class S3Storage | Downlink",
    "keywords": "Class S3Storage Inheritance System.Object S3Storage Namespace : Downlink.S3 Assembly : Downlink.S3.dll Syntax public class S3Storage : object, IRemoteStorage Constructors | Improve this Doc View Source S3Storage(IConfiguration, S3Configuration, IEnumerable<IPatternMatcher>, IEnumerable<S3MatchStrategy>) Declaration public S3Storage(IConfiguration configuration, S3Configuration opts, IEnumerable<IPatternMatcher> patternMatchers, IEnumerable<S3MatchStrategy> strategies) Parameters Type Name Description IConfiguration configuration S3Configuration opts IEnumerable < IPatternMatcher > patternMatchers IEnumerable < S3MatchStrategy > strategies Properties | Improve this Doc View Source BucketName Declaration public string BucketName { get; } Property Value Type Description System.String | Improve this Doc View Source Name Declaration public string Name { get; } Property Value Type Description System.String Methods | Improve this Doc View Source GetFileAsync(VersionSpec) Declaration public Task<IFileSource> GetFileAsync(VersionSpec version) Parameters Type Name Description VersionSpec version Returns Type Description Task < IFileSource > Extension Methods ReflectionExtensions.IsAssignableTo<TTarget>(Object)"
  },
  "api/Downlink.Core.Diagnostics.VersionParseException.html": {
    "href": "api/Downlink.Core.Diagnostics.VersionParseException.html",
    "title": "Class VersionParseException | Downlink",
    "keywords": "Class VersionParseException Inheritance System.Object VersionParseException Namespace : Downlink.Core.Diagnostics Assembly : Downlink.Core.dll Syntax public class VersionParseException : System.Exception Constructors | Improve this Doc View Source VersionParseException() Declaration public VersionParseException() | Improve this Doc View Source VersionParseException(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) Declaration protected VersionParseException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) Parameters Type Name Description System.Runtime.Serialization.SerializationInfo info System.Runtime.Serialization.StreamingContext context | Improve this Doc View Source VersionParseException(String) Declaration public VersionParseException(string message) Parameters Type Name Description System.String message | Improve this Doc View Source VersionParseException(String, System.Exception) Declaration public VersionParseException(string message, System.Exception inner) Parameters Type Name Description System.String message System.Exception inner Extension Methods ReflectionExtensions.IsAssignableTo<TTarget>(Object)"
  },
  "api/Downlink.Core.IFileSource.html": {
    "href": "api/Downlink.Core.IFileSource.html",
    "title": "Interface IFileSource | Downlink",
    "keywords": "Interface IFileSource Namespace : Downlink.Core Assembly : Downlink.Core.dll Syntax public interface IFileSource Properties | Improve this Doc View Source Available Declaration bool Available { get; } Property Value Type Description System.Boolean | Improve this Doc View Source FileUri Declaration Uri FileUri { get; } Property Value Type Description Uri | Improve this Doc View Source Metadata Declaration FileMetadata Metadata { get; } Property Value Type Description FileMetadata | Improve this Doc View Source Version Declaration VersionSpec Version { get; } Property Value Type Description VersionSpec Extension Methods ReflectionExtensions.IsAssignableTo<TTarget>(Object)"
  },
  "api/Downlink.Core.IMatchStrategy-1.html": {
    "href": "api/Downlink.Core.IMatchStrategy-1.html",
    "title": "Interface IMatchStrategy<TObject> | Downlink",
    "keywords": "Interface IMatchStrategy<TObject> Namespace : Downlink.Core Assembly : Downlink.Core.dll Syntax public interface IMatchStrategy<TObject> where TObject : class Type Parameters Name Description TObject Properties | Improve this Doc View Source Name Declaration string Name { get; } Property Value Type Description System.String Methods | Improve this Doc View Source MatchAsync(IEnumerable<TObject>, VersionSpec) Declaration Task<IFileSource> MatchAsync(IEnumerable<TObject> items, VersionSpec version) Parameters Type Name Description IEnumerable <TObject> items VersionSpec version Returns Type Description Task < IFileSource > Extension Methods ReflectionExtensions.IsAssignableTo<TTarget>(Object)"
  },
  "api/Downlink.Core.IPatternMatcher.html": {
    "href": "api/Downlink.Core.IPatternMatcher.html",
    "title": "Interface IPatternMatcher | Downlink",
    "keywords": "Interface IPatternMatcher Namespace : Downlink.Core Assembly : Downlink.Core.dll Syntax public interface IPatternMatcher Properties | Improve this Doc View Source Name Declaration string Name { get; } Property Value Type Description System.String Methods | Improve this Doc View Source Match(Path, VersionSpec) Declaration bool Match(Path path, VersionSpec version) Parameters Type Name Description Path path VersionSpec version Returns Type Description System.Boolean Extension Methods ReflectionExtensions.IsAssignableTo<TTarget>(Object)"
  },
  "api/Downlink.Core.IRemoteStorage.html": {
    "href": "api/Downlink.Core.IRemoteStorage.html",
    "title": "Interface IRemoteStorage | Downlink",
    "keywords": "Interface IRemoteStorage Namespace : Downlink.Core Assembly : Downlink.Core.dll Syntax public interface IRemoteStorage Properties | Improve this Doc View Source Name Declaration string Name { get; } Property Value Type Description System.String Methods | Improve this Doc View Source GetFileAsync(VersionSpec) Declaration Task<IFileSource> GetFileAsync(VersionSpec version) Parameters Type Name Description VersionSpec version Returns Type Description Task < IFileSource > Extension Methods ReflectionExtensions.IsAssignableTo<TTarget>(Object)"
  },
  "api/Downlink.Core.Runtime.FlatPlatformMatcher.html": {
    "href": "api/Downlink.Core.Runtime.FlatPlatformMatcher.html",
    "title": "Class FlatPlatformMatcher | Downlink",
    "keywords": "Class FlatPlatformMatcher Inheritance System.Object FlatPlatformMatcher Namespace : Downlink.Core.Runtime Assembly : Downlink.Core.dll Syntax public class FlatPlatformMatcher : object, IPatternMatcher Constructors | Improve this Doc View Source FlatPlatformMatcher(Boolean) Declaration public FlatPlatformMatcher(bool forceNameMatching = false) Parameters Type Name Description System.Boolean forceNameMatching Properties | Improve this Doc View Source Name Declaration public string Name { get; } Property Value Type Description System.String Implements IPatternMatcher.Name Methods | Improve this Doc View Source Match(Path, VersionSpec) Declaration public bool Match(Path path, VersionSpec version) Parameters Type Name Description Path path VersionSpec version Returns Type Description System.Boolean Implements IPatternMatcher.Match(Path, VersionSpec) Extension Methods ReflectionExtensions.IsAssignableTo<TTarget>(Object)"
  },
  "api/Downlink.Core.Runtime.FlatVersionMatcher.html": {
    "href": "api/Downlink.Core.Runtime.FlatVersionMatcher.html",
    "title": "Class FlatVersionMatcher | Downlink",
    "keywords": "Class FlatVersionMatcher Inheritance System.Object FlatVersionMatcher Namespace : Downlink.Core.Runtime Assembly : Downlink.Core.dll Syntax public class FlatVersionMatcher : object, IPatternMatcher Constructors | Improve this Doc View Source FlatVersionMatcher(Boolean) Declaration public FlatVersionMatcher(bool forceNameMatching = false) Parameters Type Name Description System.Boolean forceNameMatching Properties | Improve this Doc View Source Name Declaration public string Name { get; } Property Value Type Description System.String Implements IPatternMatcher.Name Methods | Improve this Doc View Source Match(Path, VersionSpec) Declaration public bool Match(Path path, VersionSpec version) Parameters Type Name Description Path path VersionSpec version Returns Type Description System.Boolean Implements IPatternMatcher.Match(Path, VersionSpec) Extension Methods ReflectionExtensions.IsAssignableTo<TTarget>(Object)"
  },
  "api/Downlink.Core.Runtime.html": {
    "href": "api/Downlink.Core.Runtime.html",
    "title": "Namespace Downlink.Core.Runtime | Downlink",
    "keywords": "Namespace Downlink.Core.Runtime Classes FlatPatternMatcher FlatPlatformMatcher FlatVersionMatcher HierarchicalPatternMatcher RuntimePatternMatcher"
  },
  "api/Downlink.Core.VersionSpec.html": {
    "href": "api/Downlink.Core.VersionSpec.html",
    "title": "Class VersionSpec | Downlink",
    "keywords": "Class VersionSpec Inheritance System.Object VersionSpec Namespace : Downlink.Core Assembly : Downlink.Core.dll Syntax public class VersionSpec : object Constructors | Improve this Doc View Source VersionSpec(String, String, String) Declaration public VersionSpec(string version, string platform, string architecture) Parameters Type Name Description System.String version System.String platform System.String architecture Properties | Improve this Doc View Source Architecture Declaration public string Architecture { get; } Property Value Type Description System.String | Improve this Doc View Source IsStable Declaration public bool IsStable { get; } Property Value Type Description System.Boolean | Improve this Doc View Source Platform Declaration public string Platform { get; } Property Value Type Description System.String | Improve this Doc View Source Summary Declaration public string Summary { get; } Property Value Type Description System.String Methods | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Operators | Improve this Doc View Source Implicit(VersionSpec to String) Declaration public static implicit operator string (VersionSpec v) Parameters Type Name Description VersionSpec v Returns Type Description System.String Extension Methods ReflectionExtensions.IsAssignableTo<TTarget>(Object)"
  },
  "api/Downlink.GitHub.CredentialFactory.html": {
    "href": "api/Downlink.GitHub.CredentialFactory.html",
    "title": "Class CredentialFactory | Downlink",
    "keywords": "Class CredentialFactory Inheritance System.Object CredentialFactory Namespace : Downlink.GitHub Assembly : Downlink.GitHub.dll Syntax public static class CredentialFactory : object Methods | Improve this Doc View Source BuildCredentials(System.IServiceProvider) Declaration public static GitHubCredentials BuildCredentials(System.IServiceProvider provider) Parameters Type Name Description System.IServiceProvider provider Returns Type Description GitHubCredentials"
  },
  "api/Downlink.GitHub.FlatMatchStrategy.html": {
    "href": "api/Downlink.GitHub.FlatMatchStrategy.html",
    "title": "Class FlatMatchStrategy | Downlink",
    "keywords": "Class FlatMatchStrategy Inheritance System.Object GitHubMatchStrategy FlatMatchStrategy Inherited Members GitHubMatchStrategy.Name Namespace : Downlink.GitHub Assembly : Downlink.GitHub.dll Syntax public class FlatMatchStrategy : GitHubMatchStrategy, IMatchStrategy<Octokit.Release> Constructors | Improve this Doc View Source FlatMatchStrategy(IConfiguration, ILogger<FlatMatchStrategy>) Declaration public FlatMatchStrategy(IConfiguration config, ILogger<FlatMatchStrategy> logger) Parameters Type Name Description IConfiguration config ILogger < FlatMatchStrategy > logger Methods | Improve this Doc View Source MatchAsync(IEnumerable<Release>, VersionSpec) Declaration public override Task<IFileSource> MatchAsync(IEnumerable<Release> releases, VersionSpec version) Parameters Type Name Description IEnumerable < Release > releases VersionSpec version Returns Type Description Task < IFileSource > Overrides GitHubMatchStrategy.MatchAsync(IEnumerable<Release>, VersionSpec) Extension Methods ReflectionExtensions.IsAssignableTo<TTarget>(Object)"
  },
  "api/Downlink.GitHub.GitHubMatchStrategy.html": {
    "href": "api/Downlink.GitHub.GitHubMatchStrategy.html",
    "title": "Class GitHubMatchStrategy | Downlink",
    "keywords": "Class GitHubMatchStrategy Inheritance System.Object GitHubMatchStrategy FlatMatchStrategy Namespace : Downlink.GitHub Assembly : Downlink.GitHub.dll Syntax public abstract class GitHubMatchStrategy : object, IMatchStrategy<Octokit.Release> Constructors | Improve this Doc View Source GitHubMatchStrategy(String) Declaration protected GitHubMatchStrategy(string name) Parameters Type Name Description System.String name Properties | Improve this Doc View Source Name Declaration public string Name { get; } Property Value Type Description System.String Methods | Improve this Doc View Source MatchAsync(IEnumerable<Release>, VersionSpec) Declaration public abstract Task<IFileSource> MatchAsync(IEnumerable<Release> items, VersionSpec version) Parameters Type Name Description IEnumerable < Release > items VersionSpec version Returns Type Description Task < IFileSource > Extension Methods ReflectionExtensions.IsAssignableTo<TTarget>(Object)"
  },
  "api/Downlink.GitHub.IGitHubClient.html": {
    "href": "api/Downlink.GitHub.IGitHubClient.html",
    "title": "Interface IGitHubClient | Downlink",
    "keywords": "Interface IGitHubClient Inherited Members IRemoteStorage.Name IRemoteStorage.GetFileAsync(VersionSpec) Namespace : Downlink.GitHub Assembly : Downlink.GitHub.dll Syntax public interface IGitHubClient : IRemoteStorage Extension Methods ReflectionExtensions.IsAssignableTo<TTarget>(Object)"
  },
  "api/Downlink.Handlers.HttpDownloadClient.html": {
    "href": "api/Downlink.Handlers.HttpDownloadClient.html",
    "title": "Class HttpDownloadClient | Downlink",
    "keywords": "Class HttpDownloadClient Inheritance System.Object SchemeClient HttpDownloadClient Inherited Members SchemeClient.Schemes Namespace : Downlink.Handlers Assembly : Downlink.dll Syntax public class HttpDownloadClient : SchemeClient, ISchemeClient Constructors | Improve this Doc View Source HttpDownloadClient(ILogger<HttpDownloadClient>) Declaration public HttpDownloadClient(ILogger<HttpDownloadClient> logger) Parameters Type Name Description ILogger < HttpDownloadClient > logger Properties | Improve this Doc View Source DownloadLocation Declaration public string DownloadLocation { get; } Property Value Type Description System.String Methods | Improve this Doc View Source GetContentAsync(IFileSource) Declaration public override Task<IActionResult> GetContentAsync(IFileSource file) Parameters Type Name Description IFileSource file Returns Type Description Task < IActionResult > Overrides SchemeClient.GetContentAsync(IFileSource) Extension Methods ReflectionExtensions.IsAssignableTo<TTarget>(Object)"
  },
  "api/Downlink.Handlers.IResponseHandler.html": {
    "href": "api/Downlink.Handlers.IResponseHandler.html",
    "title": "Interface IResponseHandler | Downlink",
    "keywords": "Interface IResponseHandler Namespace : Downlink.Handlers Assembly : Downlink.dll Syntax public interface IResponseHandler Methods | Improve this Doc View Source HandleAsync(IFileSource) Declaration Task<IActionResult> HandleAsync(IFileSource file) Parameters Type Name Description IFileSource file Returns Type Description Task < IActionResult > Extension Methods ReflectionExtensions.IsAssignableTo<TTarget>(Object)"
  },
  "api/Downlink.Handlers.ISchemeClient.html": {
    "href": "api/Downlink.Handlers.ISchemeClient.html",
    "title": "Interface ISchemeClient | Downlink",
    "keywords": "Interface ISchemeClient This interface is intended as an extension point to support storage backends that return unsupported URI schemes. Namespace : Downlink.Handlers Assembly : Downlink.dll Syntax public interface ISchemeClient Properties | Improve this Doc View Source Schemes Declaration IEnumerable<string> Schemes { get; } Property Value Type Description IEnumerable < System.String > Methods | Improve this Doc View Source GetContentAsync(IFileSource) Declaration Task<IActionResult> GetContentAsync(IFileSource file) Parameters Type Name Description IFileSource file Returns Type Description Task < IActionResult > Extension Methods ReflectionExtensions.IsAssignableTo<TTarget>(Object)"
  },
  "api/Downlink.Handlers.ProxyingResponseHandler.html": {
    "href": "api/Downlink.Handlers.ProxyingResponseHandler.html",
    "title": "Class ProxyingResponseHandler | Downlink",
    "keywords": "Class ProxyingResponseHandler Inheritance System.Object ResponseHandler ProxyingResponseHandler Inherited Members ResponseHandler.AdditionalClients ResponseHandler.HandleUnknownAsync(IFileSource) Namespace : Downlink.Handlers Assembly : Downlink.dll Syntax public class ProxyingResponseHandler : ResponseHandler, IResponseHandler Constructors | Improve this Doc View Source ProxyingResponseHandler(IEnumerable<ISchemeClient>, ILogger<ProxyingResponseHandler>) Declaration public ProxyingResponseHandler(IEnumerable<ISchemeClient> clients, ILogger<ProxyingResponseHandler> logger) Parameters Type Name Description IEnumerable < ISchemeClient > clients ILogger < ProxyingResponseHandler > logger Methods | Improve this Doc View Source HandleAsync(IFileSource) Declaration public override Task<IActionResult> HandleAsync(IFileSource file) Parameters Type Name Description IFileSource file Returns Type Description Task < IActionResult > Overrides ResponseHandler.HandleAsync(IFileSource) Extension Methods ReflectionExtensions.IsAssignableTo<TTarget>(Object)"
  },
  "api/Downlink.HostBuilderExtensions.html": {
    "href": "api/Downlink.HostBuilderExtensions.html",
    "title": "Class HostBuilderExtensions | Downlink",
    "keywords": "Class HostBuilderExtensions Inheritance System.Object HostBuilderExtensions Namespace : Downlink Assembly : Downlink.Host.dll Syntax public static class HostBuilderExtensions : object Methods | Improve this Doc View Source ConfigureLogging(IWebHostBuilder) Declaration public static IWebHostBuilder ConfigureLogging(this IWebHostBuilder builder) Parameters Type Name Description IWebHostBuilder builder Returns Type Description IWebHostBuilder"
  },
  "api/Downlink.Hosting.DownlinkBuilder.html": {
    "href": "api/Downlink.Hosting.DownlinkBuilder.html",
    "title": "Class DownlinkBuilder | Downlink",
    "keywords": "Class DownlinkBuilder Inheritance System.Object DownlinkBuilder Namespace : Downlink.Hosting Assembly : Downlink.dll Syntax public class DownlinkBuilder : object, IDownlinkBuilder Properties | Improve this Doc View Source Services Declaration public IServiceCollection Services { get; } Property Value Type Description IServiceCollection Implements IDownlinkBuilder.Services Methods | Improve this Doc View Source Build() Declaration public void Build() Implements IDownlinkBuilder.Build() Extension Methods ReflectionExtensions.IsAssignableTo<TTarget>(Object)"
  },
  "api/Downlink.Hosting.DownlinkBuilderOptions.html": {
    "href": "api/Downlink.Hosting.DownlinkBuilderOptions.html",
    "title": "Enum DownlinkBuilderOptions | Downlink",
    "keywords": "Enum DownlinkBuilderOptions Namespace : Downlink.Hosting Assembly : Downlink.dll Syntax public enum DownlinkBuilderOptions : int Fields Name Description None SkipDefaultHandlers SkipDefaultPatterns SkipDefaultSchemeClients SkipDefaultStorage"
  },
  "api/Downlink.Hosting.DownlinkDefaultServices.html": {
    "href": "api/Downlink.Hosting.DownlinkDefaultServices.html",
    "title": "Class DownlinkDefaultServices | Downlink",
    "keywords": "Class DownlinkDefaultServices Inheritance System.Object DownlinkDefaultServices Namespace : Downlink.Hosting Assembly : Downlink.dll Syntax public class DownlinkDefaultServices : object, IDownlinkPlugin Methods | Improve this Doc View Source AddServices(IDownlinkBuilder) Declaration public void AddServices(IDownlinkBuilder builder) Parameters Type Name Description IDownlinkBuilder builder Implements IDownlinkPlugin.AddServices(IDownlinkBuilder) Extension Methods ReflectionExtensions.IsAssignableTo<TTarget>(Object)"
  },
  "api/Downlink.Hosting.html": {
    "href": "api/Downlink.Hosting.html",
    "title": "Namespace Downlink.Hosting | Downlink",
    "keywords": "Namespace Downlink.Hosting Classes DownlinkBuilder DownlinkDefaultServices IDownlinkBuilderExtensions MvcBuilderExtensions WebHostBuilderExtensions Interfaces IDownlinkBuilder Enums DownlinkBuilderOptions"
  },
  "api/Downlink.Infrastructure.ConfigurationExtensions.html": {
    "href": "api/Downlink.Infrastructure.ConfigurationExtensions.html",
    "title": "Class ConfigurationExtensions | Downlink",
    "keywords": "Class ConfigurationExtensions Inheritance System.Object ConfigurationExtensions Namespace : Downlink.Infrastructure Assembly : Downlink.dll Syntax public static class ConfigurationExtensions : object Methods | Improve this Doc View Source Get<T>(IConfiguration, String) Declaration public static T Get<T>(this IConfiguration config, string key)where T : new () Parameters Type Name Description IConfiguration config System.String key Returns Type Description T Type Parameters Name Description T"
  },
  "api/Downlink.Infrastructure.HttpClientExtensions.html": {
    "href": "api/Downlink.Infrastructure.HttpClientExtensions.html",
    "title": "Class HttpClientExtensions | Downlink",
    "keywords": "Class HttpClientExtensions Inheritance System.Object HttpClientExtensions Namespace : Downlink.Infrastructure Assembly : Downlink.dll Syntax public static class HttpClientExtensions : object Methods | Improve this Doc View Source ReadAsFileAsync(HttpContent, String, Boolean) Declaration public static Task ReadAsFileAsync(this HttpContent content, string filename, bool overwrite) Parameters Type Name Description HttpContent content System.String filename System.Boolean overwrite Returns Type Description Task"
  },
  "api/Downlink.Infrastructure.ReflectionExtensions.html": {
    "href": "api/Downlink.Infrastructure.ReflectionExtensions.html",
    "title": "Class ReflectionExtensions | Downlink",
    "keywords": "Class ReflectionExtensions Inheritance System.Object ReflectionExtensions Namespace : Downlink.Infrastructure Assembly : Downlink.dll Syntax public static class ReflectionExtensions : object Methods | Improve this Doc View Source IsAssignableTo(Type, Type) Declaration public static bool IsAssignableTo(this Type type, Type otherType) Parameters Type Name Description Type type Type otherType Returns Type Description System.Boolean | Improve this Doc View Source IsAssignableTo<TTarget>(Object) Declaration public static bool IsAssignableTo<TTarget>(this object o) Parameters Type Name Description System.Object o Returns Type Description System.Boolean Type Parameters Name Description TTarget"
  },
  "api/Downlink.Local.LocalFileStorage.html": {
    "href": "api/Downlink.Local.LocalFileStorage.html",
    "title": "Class LocalFileStorage | Downlink",
    "keywords": "Class LocalFileStorage Inheritance System.Object LocalFileStorage Namespace : Downlink.Local Assembly : Downlink.Local.dll Syntax public class LocalFileStorage : object, IRemoteStorage Constructors | Improve this Doc View Source LocalFileStorage(IConfiguration, IEnumerable<IPatternMatcher>, IEnumerable<LocalFileMatchStrategy>, ILogger<LocalFileStorage>) Declaration public LocalFileStorage(IConfiguration configuration, IEnumerable<IPatternMatcher> matchers, IEnumerable<LocalFileMatchStrategy> strategies, ILogger<LocalFileStorage> logger) Parameters Type Name Description IConfiguration configuration IEnumerable < IPatternMatcher > matchers IEnumerable < LocalFileMatchStrategy > strategies ILogger < LocalFileStorage > logger Properties | Improve this Doc View Source Name Declaration public string Name { get; } Property Value Type Description System.String Methods | Improve this Doc View Source GetFileAsync(VersionSpec) Declaration public Task<IFileSource> GetFileAsync(VersionSpec version) Parameters Type Name Description VersionSpec version Returns Type Description Task < IFileSource > Extension Methods ReflectionExtensions.IsAssignableTo<TTarget>(Object)"
  },
  "api/Downlink.Local.ServiceCollectionExtensions.html": {
    "href": "api/Downlink.Local.ServiceCollectionExtensions.html",
    "title": "Class ServiceCollectionExtensions | Downlink",
    "keywords": "Class ServiceCollectionExtensions Inheritance System.Object ServiceCollectionExtensions Namespace : Downlink.Local Assembly : Downlink.Local.dll Syntax public static class ServiceCollectionExtensions : object Methods | Improve this Doc View Source AddLocalStorage(IServiceCollection) Declaration public static IServiceCollection AddLocalStorage(this IServiceCollection services) Parameters Type Name Description IServiceCollection services Returns Type Description IServiceCollection"
  },
  "api/Downlink.Local.html": {
    "href": "api/Downlink.Local.html",
    "title": "Namespace Downlink.Local | Downlink",
    "keywords": "Namespace Downlink.Local Classes LocalFileMatchStrategy LocalFileSource LocalFileStorage ServiceCollectionExtensions"
  },
  "api/Downlink.Messaging.ActionNotification.html": {
    "href": "api/Downlink.Messaging.ActionNotification.html",
    "title": "Class ActionNotification | Downlink",
    "keywords": "Class ActionNotification Inheritance System.Object ActionNotification Namespace : Downlink.Messaging Assembly : Downlink.dll Syntax public class ActionNotification : MediatR.INotificationHandler<AppVersionResponseModel> Methods | Improve this Doc View Source Handle(AppVersionResponseModel) Declaration public void Handle(AppVersionResponseModel notification) Parameters Type Name Description AppVersionResponseModel notification Extension Methods ReflectionExtensions.IsAssignableTo<TTarget>(Object)"
  },
  "api/Downlink.Program.html": {
    "href": "api/Downlink.Program.html",
    "title": "Class Program | Downlink",
    "keywords": "Class Program Inheritance System.Object Program Namespace : Downlink Assembly : Downlink.Host.dll Syntax public class Program : object Methods | Improve this Doc View Source BuildWebHost(String[]) Declaration public static IWebHost BuildWebHost(string[] args) Parameters Type Name Description System.String [] args Returns Type Description IWebHost | Improve this Doc View Source Main(String[]) Declaration public static void Main(string[] args) Parameters Type Name Description System.String [] args Extension Methods ReflectionExtensions.IsAssignableTo<TTarget>(Object)"
  },
  "api/Downlink.S3.S3Configuration.html": {
    "href": "api/Downlink.S3.S3Configuration.html",
    "title": "Class S3Configuration | Downlink",
    "keywords": "Class S3Configuration Inheritance System.Object S3Configuration Namespace : Downlink.S3 Assembly : Downlink.S3.dll Syntax public class S3Configuration : object Extension Methods ReflectionExtensions.IsAssignableTo<TTarget>(Object)"
  },
  "api/Downlink.S3.S3FileSource.html": {
    "href": "api/Downlink.S3.S3FileSource.html",
    "title": "Class S3FileSource | Downlink",
    "keywords": "Class S3FileSource Inheritance System.Object S3FileSource Namespace : Downlink.S3 Assembly : Downlink.S3.dll Syntax public class S3FileSource : object, IFileSource Properties | Improve this Doc View Source Available Declaration public bool Available { get; } Property Value Type Description System.Boolean | Improve this Doc View Source FileUri Declaration public Uri FileUri { get; } Property Value Type Description Uri | Improve this Doc View Source Metadata Declaration public FileMetadata Metadata { get; } Property Value Type Description FileMetadata Implements IFileSource.Metadata | Improve this Doc View Source Version Declaration public VersionSpec Version { get; set; } Property Value Type Description VersionSpec Implements IFileSource.Version Extension Methods ReflectionExtensions.IsAssignableTo<TTarget>(Object)"
  },
  "api/Downlink.S3.S3FileStorageFactory.html": {
    "href": "api/Downlink.S3.S3FileStorageFactory.html",
    "title": "Class S3FileStorageFactory | Downlink",
    "keywords": "Class S3FileStorageFactory Inheritance System.Object S3FileStorageFactory Namespace : Downlink.S3 Assembly : Downlink.S3.dll Syntax public static class S3FileStorageFactory : object Methods | Improve this Doc View Source BuildS3FileStorage(System.IServiceProvider) Declaration public static IRemoteStorage BuildS3FileStorage(System.IServiceProvider provider) Parameters Type Name Description System.IServiceProvider provider Returns Type Description IRemoteStorage"
  },
  "api/Downlink.S3.html": {
    "href": "api/Downlink.S3.html",
    "title": "Namespace Downlink.S3 | Downlink",
    "keywords": "Namespace Downlink.S3 Classes S3Configuration S3FileSource S3FileStorageFactory S3MatchStrategy S3SearchStorage S3Storage ServiceCollectionExtensions"
  },
  "api/Downlink.Startup.html": {
    "href": "api/Downlink.Startup.html",
    "title": "Class Startup | Downlink",
    "keywords": "Class Startup Inheritance System.Object Startup Namespace : Downlink Assembly : Downlink.Host.dll Syntax public class Startup : object Constructors | Improve this Doc View Source Startup(IConfiguration) Declaration public Startup(IConfiguration configuration) Parameters Type Name Description IConfiguration configuration Properties | Improve this Doc View Source Configuration Declaration public IConfiguration Configuration { get; } Property Value Type Description IConfiguration Methods | Improve this Doc View Source Configure(IApplicationBuilder, IHostingEnvironment, ILoggerFactory) Declaration public void Configure(IApplicationBuilder app, IHostingEnvironment env, ILoggerFactory loggerFactory) Parameters Type Name Description IApplicationBuilder app IHostingEnvironment env ILoggerFactory loggerFactory | Improve this Doc View Source ConfigureServices(IServiceCollection) Declaration public void ConfigureServices(IServiceCollection services) Parameters Type Name Description IServiceCollection services Extension Methods ReflectionExtensions.IsAssignableTo<TTarget>(Object)"
  },
  "api/Downlink.StartupExtensions.html": {
    "href": "api/Downlink.StartupExtensions.html",
    "title": "Class StartupExtensions | Downlink",
    "keywords": "Class StartupExtensions Inheritance System.Object StartupExtensions Namespace : Downlink Assembly : Downlink.Host.dll Syntax public static class StartupExtensions : object Methods | Improve this Doc View Source AddFormatterMappings(MvcOptions) Declaration public static MvcOptions AddFormatterMappings(this MvcOptions opts) Parameters Type Name Description MvcOptions opts Returns Type Description MvcOptions | Improve this Doc View Source AddMvcServices(IServiceCollection) Declaration public static IMvcCoreBuilder AddMvcServices(this IServiceCollection services) Parameters Type Name Description IServiceCollection services Returns Type Description IMvcCoreBuilder | Improve this Doc View Source UseCorsPolicy(IApplicationBuilder) Declaration public static IApplicationBuilder UseCorsPolicy(this IApplicationBuilder app) Parameters Type Name Description IApplicationBuilder app Returns Type Description IApplicationBuilder"
  },
  "api/Downlink.Storage.NoneStorage.html": {
    "href": "api/Downlink.Storage.NoneStorage.html",
    "title": "Class NoneStorage | Downlink",
    "keywords": "Class NoneStorage Inheritance System.Object NoneStorage Namespace : Downlink.Storage Assembly : Downlink.dll Syntax public class NoneStorage : object, IRemoteStorage Constructors | Improve this Doc View Source NoneStorage(ILogger<NoneStorage>) Declaration public NoneStorage(ILogger<NoneStorage> logger) Parameters Type Name Description ILogger < NoneStorage > logger Properties | Improve this Doc View Source Name Declaration public string Name { get; } Property Value Type Description System.String Methods | Improve this Doc View Source GetFileAsync(VersionSpec) Declaration public Task<IFileSource> GetFileAsync(VersionSpec version) Parameters Type Name Description VersionSpec version Returns Type Description Task < IFileSource > Extension Methods ReflectionExtensions.IsAssignableTo<TTarget>(Object)"
  },
  "doc/dev/contributing.html": {
    "href": "doc/dev/contributing.html",
    "title": "Contributing Guide | Downlink",
    "keywords": "Contributing Guide This is very much an active project so any and all contributions are welcome, even just finding issues! Reporting issues All issues should be tracked on GitHub , with enough information to reproduce the issue. Code Contributions This repository is based around the Git Flow workflow, using feature branches and pull requests to manage incoming changes and fixes. Generally speaking, the process can be summarised as follows: Find a change or fix you want to implement Fork the repo Create a new branch named feature/<your-feature-name> and make your changes Open a PR from your feature branch against the develop branch (include the GitHub issue number for fixes) Success! I will provide feedback if needed, or just accept the changes directly and they should appear in the next release Documentation This documentation should include an Improve this Doc button in the upper right. Click it to quickly jump to the source of the current documentation. You can then fork, branch and issue a PR just as with code contributions (see above). License Note that this project (and all contributions) fall under the MIT License terms."
  },
  "doc/dev/developers.html": {
    "href": "doc/dev/developers.html",
    "title": "Developer's Guide | Downlink",
    "keywords": "Developer's Guide Tip You can check the Developer Reference above for full API source reference, directly from the source code. Building Building this project is super-simple: run build.ps1 if you're on Windows, or build.sh if you're on Linux. To build the documentation, you may also need wkhtmltopdf installed. Packaging To do a complete build of the tool and build all packages, you will need to have Docker installed and available on your host (and accessible to the user running the build script). The build script will complete all the packaging steps in a series of Docker containers so this may be a slow process the first time you run it as the relevant images are pulled from the Hub. Introduction Downlink has a lot of moving parts, so the code base may appear quite daunting at first, but fear not! While there are a lot of individual components, they are mostly quite simple and a lot of the plumbing/boilerplate is already taken care of by framework code. Extension points Downlink does include some specifically designed extensions points, such as the IRemoteStorage , IPatternMatcher and ISchemeClient interfaces. Working with these interfaces is explained in more detail below, and in the other documents available on the left. Storage Downlink is primarily a gateway which means the app artifacts must actually be stored on a remote backend. In Downlink, that backend is an implementation of the IRemoteStorage interface, a simple abstraction over any storage service. The IRemoteStorage interface is deliberately simplistic, relying on returning a single Uri for the requested version, or throwing an implementation of NotFoundException (from the Downlink.Core.Diagnostics namespace) if it can't find a match. Returning a Uri rather than the artifact itself enables Downlink's built-in proxying support allowing for end users to hit the storage backend directly, or to proxy everything through Downlink itself. Storage URIs Note that the Uri returned from an IRemoteStorage implementation can be any valid URI, and it will be passed directly to the response handler in Downlink itself (an IResponseHandler implementation). Out of the box, URIs with the 'http', 'https' or 'file' URIs are automatically handled and returned to the user. If Downlink doesn't know how to handle a URI scheme, it will return a 412 Precondition Failed status. Pattern Matching Make sure to read the user docs on version matching first! Matching from a requested version (a VersionSpec instance) to a file in the remote storage is performed by either an IMatchStrategy implementation (for backend-specific logic) or a simpler IPatternMatcher implementation (backend-agnostic). Pattern matchers are passed a \"path\" to each file found on the remote backend, and asked to match against a specific version. The first time this match returns true , that file is returned from the backend. Dependency Injection This app includes dependency injection support for most of the framework and app code. Simply include the types you need in your constructor, and the app will attempt to resolve this dependency from the DI container. Note this will only work where you have registered your types with the container (such as in Startup.cs )."
  },
  "doc/dev/hosting.html": {
    "href": "doc/dev/hosting.html",
    "title": "Hosting Downlink | Downlink",
    "keywords": "Hosting Downlink Want to use Downlink without a separate site? Want to integrate Downlink into an existing ASP.NET Core app? Now you can! Downlink has been built to integrate cleanly with ASP.NET MVC Core. When you run Downlink directly (such as from the Docker image), you are actually running aginst Downlink.Host , which is a very basic ASP.NET Core app with Downlink pre-configured for use. Note that Downlink requires MVC, so plain ASP.NET Core (without MVC installed) is not supported. Getting Started The easiest way of understanding Downlink's hosting model is to show it. Example To quickly setup a Downlink instance, create a new empty ASP.NET MVC Core app (such as using dotnet new empty ). Once that has finished, you should have a Program.cs with the basic boilerplate code. First, add ConfigureDownlink() before the Build() method is called. You may need to add using Downlink.Hosting to your namespaces. // in Program.cs public class Program { public static void Main(string[] args) { BuildWebHost(args).Run(); } public static IWebHost BuildWebHost(string[] args) => WebHost.CreateDefaultBuilder(args) .ConfigureDownlink() // <-- add this line! .UseStartup<Startup>() .Build(); } This registers the Downlink configuration defaults with the app. Next, in your Startup.cs file, just add the AddDownlink() method to your ConfigureServices method. Again, you may need to add using Downlink.Hosting to your namespace imports. // in Startup.cs public class Startup { public void ConfigureServices(IServiceCollection services) { services.AddMvc().AddDownlink(); // <-- add AddDownlink() after the AddMvc() call // services.AddMvcCore().AddDownlink(); // Downlink also supports the AddMvcCore equivalent } public void Configure(IApplicationBuilder app, IHostingEnvironment env) { app.UseMvc(); // you need this line if it is not already here } } That's it! You've just added Downlink to a new ASP.NET MVC Core app. Run the app and the Downlink parts will be automatically registered, and you can browse to myapp:5000/version-here/platform-here/arch-here to get your app downloads. Note that we haven't added any of the configuration Downlink needs so make sure to follow the configuration steps outlined in the Getting Started guide and the Configuration guide ."
  },
  "doc/user/storage-az.html": {
    "href": "doc/user/storage-az.html",
    "title": "Azure Storage for Downlink | Downlink",
    "keywords": "Azure Storage for Downlink The Downlink.AzureStorage library (bundled with Downlink) adds support for Azure Storage as a remote storage backend. Activating the Azure Storage backend Check the configuration guide for full details You can quickly enable the Azure Storage backend by setting the Storage configuration key to \"AzureStorage\". This will invoke the AddAzureStorage() method and add Azure Storage to your application. Configuration The Azure Storage backend requires two things be added to your app configuration (i.e. downlink.json or downlink.yml ): the connection string used for your Azure Storage account, and the name of the container to retrieve from. Connection String { \"ConnectionStrings\": { \"AzureStorage\": \"DefaultEndpointsProtocol=https;AccountName=storagesample;AccountKey=<account-key>+\" }, } ConnectionStrings : AzureStorage: 'DefaultEndpointsProtocol=https;AccountName=storagesample;AccountKey=<account-key>+' Follow the instructions in the official documentation to get your connection string. Container Name { \"AzureStorage\": { \"Container\": \"container-name-here\" } } AzureStorage: Container: 'container-name-here' How it works Much like the S3 backend , the Azure Storage backend relies on hierarchical storage of app artifacts, and defaults to using the container-name/version/platform/architecture form. For example: # Path inside container /v1.2/windows/x64/myapp.msi Will be resolved for the /v1.2/windows/x64 path. Note that this mode requires each \"directory\" to contain only one file (Downlink will just return the first file in the matching directory). Alternate modes You can also provide the MatchStrategy option under AzureStorage configuration to control the matching behaviour. Using FlatVersion results in a request for /v1.2/windows/x64 being mapped to the /v1.2 directory in the container, and the first file with windows and x64 in the name will be returned. Likewise, FlatPlatform will use the same method for the first file in the /windows directory. Finally the Flat strategy just matches all files in the top level of the container against all three properties, and is not recommended if at all possible. The default behaviour can be specified using the Hierarchical strategy config Force Name Matching Set the AzureStorage/ForceNameMatching option to true to also force any matches to include the requested version in the file name. This is useful if you have more than one file in the target folder (such as metadata etc)."
  },
  "doc/user/storage-gh.html": {
    "href": "doc/user/storage-gh.html",
    "title": "GitHub Release Storage for Downlink | Downlink",
    "keywords": "GitHub Release Storage for Downlink The Downlink.GitHub library (bundled with Downlink) adds support for GitHub releases as a remote storage backend. Activating the GitHub Release backend Check the configuration guide for full details You can quickly enable the GitHub Release backend by setting the Storage configuration key to \"GitHub\". This will invoke the AddGitHubReleaseStorage() method and add GitHub Release-backed storage to your application. Configuration The GitHub Release backend requires some configuration for the repository to use, and optionally for GitHub Enterprise. The backend defaults to using GitHub.com, but providing a ServerUrl configuration key will use GitHub Enterprise instead. { \"GitHubStorage\": { \"Repository\": \"agc93/downlink\" } } GitHubStorage: Repository: 'agc93/downlink' ServerUrl: 'https://github.myenterprise.com' How it works The GitHub Release backend is quite unique from other currently supported backends in not having any notion of folders or hierarchy, since it uses the assets attached to a given release. Due to this, it relies on naming conventions in asset files to work correctly. For example, for an app name ' myapp ', a request to /v1.2/windows/x64 would search for an asset named myapp_v1.2_windows_x64.exe , or equivalent. The important parts are that segments are separated by an underscore ( _ ) and only the first segment is ignored. As such, the following two URLs are functionally equivalent: my-awesome-app-with-features-and-things_v1_macos_x64.app myapp_v1_macos_x64.app while the following are different: my-awesome-app_v2_macos_x64.app -> /v2/macos/x64 my-awesome-app_patch_macos_x64.app -> /patch/macos/x64 You can also change what character Downlink uses to parse the release name by using the GitHubStorage/SplitCharacters configuration key: { \"GitHubStorage\": { \"SplitCharacters\": [ \"_\", \"-\" ] } } GitHubStorage: SplitCharacters: - '-' - '_' Remember that as with any other backends, the easiest way to 'skip' a field, such as when you are only building for one architecture, is to use a single value like any or default . Alternate modes You can also provide the MatchStrategy option under GitHubStorage configuration to control the matching behaviour. Note that due to the limited nature of GitHub Releases, it is recommended to not change the version matching method unless absolutely required, as even the flat matching documented here is adjusted for GitHub compared to other backends. Experimental latest support There is also experimental support for the magic latest version when using the GitHub backend. This will automatically use the most recently published non-draft non-prerelease release, saving you the trouble of updating links for getting the most recent version. For example, if your most recent release was v0.24.1 then a request to /v0.24.1/windows/x64 and to /latest/windows/x64 would serve the same package, until you publish another release at which point latest will update to the new one. Since this is experimental it has to be enabled using the Experimental:GitHubLatestVersion flag. This can be done by setting the DOWNLINK__Experimental__GitHubLatestVersion environment variable to true , or using the config file: { \"Experimental\": { \"GitHubLatestVersion\": true } } Experimental: GitHubLatestVersion: true"
  },
  "doc/user/storage-s3.html": {
    "href": "doc/user/storage-s3.html",
    "title": "AWS S3 Storage for Downlink | Downlink",
    "keywords": "AWS S3 Storage for Downlink The Downlink.S3 library (bundled with Downlink) adds support for AWS S3 as a remote storage backend. Activating the AWS S3 backend Check the configuration guide for full details You can quickly enable the AWS S3 backend by setting the Storage configuration key to \"S3\". This will invoke the AddS3Storage() method and add AWS S3 Storage to your application. Configuration The AWS S3 backend requires configuration for the credential profile and bucket name you want to use to be added to your app configuration (i.e. downlink.json or downlink.yml ). { \"AWS\": { \"Profile\": \"local-creds-profile\", \"Region\": \"us-west-2\", \"Bucket\": \"downlink\" }, } AWS: Profile: 'local-test-profile' Region: 'us-west-2' Bucket: 'downlink' How it works Much like the Azure backend , the S3 backend uses hierarchical storage of app artifacts, and defaults to using the container-name/version/platform/architecture form. For example: # Path inside bucket /v1.2/windows/x64/myapp.msi Will be resolved for the /v1.2/windows/x64 path. Note that this mode requires each \"directory\" to contain only one file (Downlink will just return the first file in the matching directory). Alternate modes You can also provide the MatchStrategy option under AWS configuration to control the matching behaviour. Using FlatVersion results in a request for /v1.2/windows/x64 being mapped to the /v1.2 directory in the container, and the first file with windows and x64 in the name will be returned. Likewise, FlatPlatform will use the same method for the first file in the /windows directory. Finally the Flat strategy just matches all files in the top level of the container against all three properties, and is not recommended if at all possible. The default behaviour can be specified using the Search strategy config Force Name Matching Set the AWS/ForceNameMatching option to true to also force any matches to include the requested version in the file name. This is useful if you have more than one file in the target folder (such as metadata etc)."
  },
  "api/index.html": {
    "href": "api/index.html",
    "title": "Downlink | Downlink",
    "keywords": "Downlink Browse through the source reference using the menu on the left. The developer guide can be found here ."
  },
  "doc/dev/intro.html": {
    "href": "doc/dev/intro.html",
    "title": "Developer Reference | Downlink",
    "keywords": "Developer Reference This documentation is intended for use by developers and advanced users looking to build on Downlink or customise it for more advanced scenarios. It's recommended to read the Developer's Guide first for a birds-eye view of how Downlink works. Pick a topic from the menu on the left to see the documentation for more specific scenarios such as building your own storage backend, or extending Downlink with a pre-built plugin. Finally, you can see full source documentation, built directly from the code, in the Source Reference ."
  },
  "doc/dev/plugins.html": {
    "href": "doc/dev/plugins.html",
    "title": "Building and using plugins | Downlink",
    "keywords": "Building and using plugins Downlink includes a built-in plugin system to easily extend Downlink with customised logic and support for additional services. Note that plugins aren't the only way to extend Downlink! If you're self hosting Downlink, you can use the IDownlinkBuilder overloads to quickly add individual components like scheme clients or storage backends individually. Unlike that method, plugins can be used to register any service and any number of services with Downlink in one hit. This makes plugins perfect for bundling linked components together (like a new storage backend with it's own version semantics). Tip You can look at plugins as a \" bundle \" of extension points for Downlink, distributed and loaded together Plugin basics At it's heart, a plugin consists of an IDownlinkPlugin implementation. That's what the AddPlugin method accepts, and is what the host uses to load up your plugin. In practice, the IDownlinkPlugin implementation should be your entry point, responsible for adding any other extension points your plugin is installing to the services container. Building a plugin To get started building a plugin, create a new .NET Standard class library and add a reference to the Downlink and Downlink.Core packages. Next you'll want to add your plugin's resources. This will usually be things like a storage backend , a pattern matcher, a scheme client or any other Downlink service such as a response handler. For this example, we're going to assume you've created a new storage backend called MyAwesomeStorage that needs a custom scheme client called MyAwesomeSchemeClient . To package these into a plugin, create a new class (e.g. MyAwesomePlugin ) and implement IDownlinkPlugin (from the Downlink.Composition namespace). For example: public class MyAwesomePlugin : IDownlinkPlugin { public void AddServices(IDownlinkBuilder builder) { } } In the AddServices method, call the builder's Add* methods to add your new awesome services to the Downlink container. Note that if, for example, your storage backend also needed an instance of MyAwesomeService injected into the constructor you can add that directly to the container: Warning If you want to add services directly to the container (i.e. not using the Downlink builder methods), you'll need to install the Microsoft.Extensions.DependencyInjection.Abstractions package public void AddServices(IDownlinkBuilder builder) { builder.Services.AddSingleton<MyAwesomeService>(); builder.AddStorage<MyAwesomeStorage>(); builder.AddSchemeClient<MyAwesomeSchemeClient>(); } Now, to add your plugin to your self-hosted app, just add a call to AddPlugin to your app's Startup.cs in the ConfigureServices method. // in Startup.cs public void ConfigureServices(IServiceCollection services) { services.AddMvc() .AddDownlink(b => b.AddPlugin<MyAwesomePlugin>()); } That's it! Your plugin's implementation of IDownlinkBuilder will automatically get invoked, adding your services to the container. Update your configuration as needed and start your app again to test it out. Default plugin discovery The default Downlink host (the one packaged in the Docker image, and in binary packages) also supports an experimental new feature: local plugin discovery. What this means is that you can drop a .dll file in the app folder that matches the conventions and Downlink.Host will attempt to automatically locate and load it! To make this an opt-in feature, there's two changes you need to make for this to work. First, the plugin assembly's file name must start with Downlink.Extensions. and be located in the app directory (that's /downlink for Docker users). Second, you must opt-in to this feature as it's currently experimental. This is done using the Experimental:EnableLocalPlugins variable. Environment Variable: DOWNLINK__Experimental__EnableLocalPlugins JSON: { \"Experimental\": { \"EnableLocalPlugins\": true } } YAML: Experimental: EnableLocalPlugins: true If matching assemblies are found, they will be scanned for an IDownlinkPlugin implementation. If it finds one, that is loaded as a plugin and the rest of the assembly is ignored. If there is no plugin declared, Downlink will automatically scan for any storage backends ( IRemoteStorage ), pattern matchers ( IPatternMatcher ), response handlers ( IResponseHandler ) or scheme clients ( ISchemeClient ) and automatically load them into the app container."
  },
  "doc/dev/scheme-clients.html": {
    "href": "doc/dev/scheme-clients.html",
    "title": "Scheme Clients | Downlink",
    "keywords": "Scheme Clients As outlined in the storage docs, the storage backend is responsible for simply returning a URI where Downlink can find the requested artifact. Downlink uses scheme clients to resolve those URIs back to a result that can be returned to a user. The scheme client is invoked by the response handler, but you will likely not need to interact directly with response handlers, and it's best to leave the default handlers in place. Out of the box, Downlink includes logic to correctly handle any file:// , http:// or https:// scheme returned from a storage backend. To add support for another scheme (most often if you are also developing a new backend), you need to implement ISchemeClient . To make it easier, you can inherit from SchemeClient which takes out a bit of boilerplate. Your ISchemeClient implementation will need to return an IActionResult (just like a Controller action method), and that will be returned to the user. Note that your scheme client will only be invoked for the schemes it explicitly supports. Tip You'll need to install the Microsoft.AspNetCore.Mvc.Abstractions package as well. Example Scheme clients are generally quite simple. For example, here is the scheme client for handling file:// URIs (included in Downlink): public class FileSchemeClient : SchemeClient { public FileSchemeClient() : base(\"file\") { } public override Task<IActionResult> GetContentAsync(IFileSource file) { return Task.FromResult(new FileStreamResult(System.IO.File.OpenRead(file.FileUri.AbsolutePath), \"application/octet-stream\") as IActionResult); } } or the client for handling http:// / https:// URIs (also included by default): // trimmed and simplified for brevity and readability public class HttpDownloadClient : SchemeClient { public HttpDownloadClient(ILogger<HttpDownloadClient> logger) : base(new[] { \"http\", \"https\" }) { DownloadLocation = System.IO.Path.GetTempPath(); } public string DownloadLocation { get; private set; } public override async Task<IActionResult> GetContentAsync(IFileSource file) { using (var client = new HttpClient()) { var fileStream = await client.GetStreamAsync(requestUri); } return new FileStreamResult(fileStream, \"application/octet-stream\") { FileDownloadName = file.Metadata.FileName }; } } Activating new scheme clients New scheme client implementations needed to be added to Downlink either through inclusion in a plugin , or using the builder in Startup.cs : public void ConfigureServices(IServiceCollection services) { services.AddMvc() .AddDownlink(b => b.AddSchemeClient<MyAwesomeSchemeClient>()); } Downlink will then call your scheme client when any storage backend returns a URI with your client's scheme. Note Your scheme client will only be invoked for URIs that you explicitly support (in the Schemes property, or the constructor for SchemeClient implementations)"
  },
  "doc/dev/storage-howto.html": {
    "href": "doc/dev/storage-howto.html",
    "title": "How to build a custom storage backend for Downlink | Downlink",
    "keywords": "How to build a custom storage backend for Downlink Creating a storage adapter, while it may seem complex, is actually fairly straightforward. With the use of pattern matchers, you can even cut down on logic. Create your new backend First, create a new class (e.g. MyAwesomeStorage ) and implement IRemoteStorage . public class MyAwesomeStorage : IRemoteStorage { public string Name => \"Awesome\"; public Task<IFileSource> GetFileAsync(VersionSpec version) { throw new NotImplementedException(); } } The Name property is important as it is the name your users will set 'Storage' to in their configuration. When a user requests a version (such as /v1.2/windows/x64 ) and your storage backend is active, your GetFileAsync method will be invoked with a VersionSpec object for the current request. If your storage class needs additional dependencies, just declare them in the constructor. They will be resolved from the DI container on the first request. public class MyAwesomeStorage : IRemoteStorage { // trimmed public MyAwesomeStorage(IConfiguration config, ILogger<MyAwesomeStorage> logger) { // your dependencies will be injected on first request } //trimmed } Understanding the IFileSource The IFileSource interface represents the location where Downlink can find the matching app artifact for the requested version. Your storage backend will need to implement it's own file source type, with any logic needed to populate the object. For a good example of this, check out the LocalFileSource class. Note that one of the most important parts of the IFileSource is obviously the FileUri property. This is the URI that Downlink will fetch to serve (or redirect to) your app artifact. If the URI has a file:// , http:// or https:// scheme, Downlink can automatically serve it up using the built-in services. If your app needs additional logic, you can use a 'scheme client' (an ISchemeClient implementation) to include any additional logic. Check the scheme client docs for more on this. If possible, it's recommended to return one of the supported URI schemes and let Downlink handle it. Pattern matcher support To make working with your backend easier and cut down on the logic you need to re-implement in your backend, it's recommended to use pattern matchers. To do this, import an IEnumerable<IPatternMatcher> in your constructor and use a configuration key, like MyAwesomeStorage:MatchStrategy to find a matching implementation. Warning You will need to install the Microsoft.Extensions.Configuration.Abstractions and Microsoft.Extensions.Configuration.Binder packages For example: public class MyAwesomeStorage : IRemoteStorage { private readonly IPatternMatcher _matcher; public MyAwesomeStorage( Microsoft.Extensions.Configuration.IConfiguration config, IEnumerable<IPatternMatcher> matchers ) { var name = config.GetValue(\"MyAwesomeStorage:MatchStrategy\", string.Empty); _matcher = matchers.GetFor(name); // this will be null if not found! } // trimmed } Now in your GetFileAsync method, use a pattern matcher if available, or use your own logic: public class MyAwesomeStorage : IRemoteStorage { //trimmed (as above) public Task<IFileSource> GetFileAsync(VersionSpec version) { var files = GetMyAwesomeFiles(); // get a list of files from your storage backend var paths = files.Select(f => ToPath(f)); // see below! if (_matcher != null) { // use a matcher if present var matchingFile = paths.FirstOrDefault(p => _matcher.Match(p, version)); return new MyAwesomeFileSource(matchingFile); } } } In order to make pattern matchers backend-agnostic, they accept a Path instance representing the relative path of the current file in the remote storage. Mapping a domain-specific object to a Path depends on your storage, but it is usually a relative path from your storage's \"root\" to the current file. Check the existing storage implementations for ideas. Adding and activating your storage backend Once you've finished the logic for your new backend, you need to add it to the running Downlink app and activate it. Tip If you're also using other components like scheme clients, you may want to consider packaging it as a plugin . In your Downlink host, just add a call to AddStorage in the builder in Startup.cs : public void ConfigureServices(IServiceCollection services) { services.AddMvc() .AddDownlink(b => b.AddStorage<MyAwesomeStorage>()); } and finally set the Storage configuration item to the value of your new implementation's Name property: \"Awesome\" in our example."
  },
  "doc/dev/storage.html": {
    "href": "doc/dev/storage.html",
    "title": "Building a Storage Backend for Downlink | Downlink",
    "keywords": "Building a Storage Backend for Downlink Downlink is specifically designed to allow you to store app artifacts on whatever storage you want, just providing an abstraction over your chosen storage platform. Out of the box, we support GitHub Releases, Azure Storage, AWS S3, and local files, but you may want to use another different storage backend. Introduction Tip Make sure to read the Developer's Guide first! As covered in the guide, a storage backend in Downlink is essentially just an IRemoteStorage implementation that returns an IFileSource for a given VersionSpec . It's that simple. Version Matching If you're planning on distributing your custom backend for use by others, it's probably a good idea to implement support for pattern matchers so that users can customise the version matching behaviour. That's covered in the example below below, but also makes your backend's implementation much cleaner and more logical. Building a backend Note This example assumes self hosting . If you're building for a plugin the process is similar. Since this is not the simplest process and requires a bit of explanation, the process is covered in full detail in this how-to document . Activating a new backend Custom storage backends are activated in a two-step process: adding the backend to the app and activating it in configuration. To add the app when self-hosting, just call AddStorage from the builder in your Startup.cs : public void ConfigureServices(IServiceCollection services) { services.AddMvc() .AddDownlink(b => b.AddStorage<MyAwesomeStorage>()); } This will register your storage backend with Downlink, but you also need to set the value of the Storage configuration key to the name of your storage backend (that is, the value of the Name property)."
  },
  "doc/dev/version-matching.html": {
    "href": "doc/dev/version-matching.html",
    "title": "Version Matching | Downlink",
    "keywords": "Version Matching"
  },
  "doc/user/configuration.html": {
    "href": "doc/user/configuration.html",
    "title": "Downlink Configuration | Downlink",
    "keywords": "Downlink Configuration Downlink is specifically designed to be easy to configure with your choice of source and format. Currently, Downlink supports configuration provided by files in either JSON or YAML format, or from environment variables (including in the Docker image). This means that the following are all interchangeable: Storage: GitHub GitHubStorage: Repository: agc93/downlink { \"Storage\": \"GitHub\", \"GitHubStorage\": { \"Repository\": \"agc93/downlink\" } } export DOWNLINK:Storage=GitHub export DOWNLINK:GitHubStorage:Repository=\"agc93/downlink\" # You can also use double-underscores export DOWNLINK__GitHubStorage__Repository=\"agc93/downlink\" Configuration Files When using JSON or YAML files, Downlink will automatically search a number of paths for suitable config files (note these are relative to the app directory): ./appsettings.json ./downlink.yml or ./downlink.json ./config.yml or ./config.json ./config/downlink.yml or ./config/downlink.json Environment variables Additionally, any environment variables that start with DOWNLINK_ , DOWNLINK__ or DOWNLINK: are automatically added to the configuration. These are especially useful when working with the Docker container Priority Note that since configuration is loaded sequentially, configuration values can be overriden. The order of loading is as follows: Configuration files: appsettings.json downlink.json / downlink.yml config.json / config.yml ./config/downlink.json / ./config/downlink.yml Environment Variables Command Line (if present) Tip It's recommended to use configuration files for more complex configuration (such as Azure connection strings and complex paths), but environment variables can be used to easily override simple settings."
  },
  "doc/user/faq.html": {
    "href": "doc/user/faq.html",
    "title": "Frequently Asked Questions | Downlink",
    "keywords": "Frequently Asked Questions <!-- content-here --> But, why? In short, because I wanted to. Downlink was designed and built as a simple distribution mechanism for tools like Git Profile Manager where there may be a lot of binaries, versions and packages available. Since \"storing files\" is one of the few things \"the cloud\" has actually worked out, Downlink serves as an abstraction over them, so you can continue to use GitHub releases or Azure Storage or S3 buckets etc, while making links stable, predictable and agnostic to the underlying storage. Essentially, you can give your users links and never worry about things like website migrations breaking your download links. Is it SEO friendly? Not even close. Downlink is much closer to an API gateway than a web app and (at this time) doesn't even include a UI. As such, it's not good for SEO since it mostly just redirects to other locations anyway. You should make your website SEO friendly and let Downlink do the one thing it's good at: predictable, stable download links. Why can't I just download the 'latest' version? Because what defines \"latest\"? We could use the most recently uploaded, but now users might get hotfixes instead of new versions? Or serve based on version numbers, but then Downlink needs to be opinionated about how you version your app. As it is, this is considered a bit too heavy-handed and isn't natively supported. Note that for Azure Storage and S3 backends, you can always just create a version folder named latest and Downlink will happily serve it up. What platforms are supported? Downlink is built with ASP.NET Core meaning it can be run essentially anywhere .NET Core is supported. That being said, at this time, there are no pre-built platform packages available so the Docker image is still the recommended way to get started. But I already use GitHub releases! Then keep doing so! Downlink doesn't replace things like GitHub releases, it merely serves as an API over the top of them. That means you can run still use GitHub to publish your releases, and if you follow our conventions Downlink will pick up straight from your existing and new releases. If you use Downlink, you don't have to continue using GitHub Releases for ever! It also means you can rename your repository/organisation or change away from GitHub all together without breaking the download links."
  },
  "doc/user/getting-started.html": {
    "href": "doc/user/getting-started.html",
    "title": "Getting Started with Downlink | Downlink",
    "keywords": "Getting Started with Downlink To get started quickly with Downlink, use the Docker image. Once you've got Docker set up and working, you can get started very quickly with Downlink and use the powerful configuration to easily control the behaviour. As an example of how easy Downlink is to get started, we're going to set up a Downlink container to serve releases for the Hugo static site generator. Currently, their \"Download\" link just sends you to the GitHub Releases page for the hugo repository , so we can easily put Downlink in front of these using the GitHub Releases backend . First, create a config file using either YAML or JSON. For config.yml : Storage: GitHub GitHubStorage: Repository: gohugoio/hugo SplitCharacters: - '_' - '-' or for config.json : { \"Storage\": \"GitHub\", \"GitHubStorage\": { \"Repository\": \"gohugoio/hugo\", \"SplitCharacters\": [\"_\", \"-\"] } } Note We need the extra SplitCharacters configuration as Hugo names their packages with a mix of _ and - characters. Now, from a command line, run the Downlink container: docker run -it --rm -p 80:80 -v $PWD/config.yml:/downlink/config.yml agc93/downlink:latest # or for JSON docker run -it --rm -p 80:80 -v $PWD/config.json:/downlink/config.json agc93/downlink:latest The new container will start, the configuration loader will read in your new configuration file and automatically add the GitHub Releases backend, pointing at the gohugoio/hugo repository's releases. That's it! You're now running Downlink. To prove it's working, on your PC, browse to http://localhost/v0.24.1/Windows/64bit and watch as your browser automatically downloads the 64-bit Windows release of v0.24.1 of Hugo from GitHub. Tip You can verify this by checking the Network tab of your browser's developer tools, or using curl / wget You can try again with http://localhost/v0.23/macOS/32bit or http://localhost/v0.22.1/OpenBSD/64bit to get the relevant files for other versions, platforms, or architectures. Want to stop the redirecting and download straight from Downlink? Easy! Stop the container using Ctrl-C (it will be automatically removed), and run again, this time providing an extra configuration key from an environment variable: docker run -it --rm -p 80:80 -v $PWD/config.yml:/downlink/config.yml -e DOWNLINK:ProxyRemoteFiles=true agc93/downlink:latest # or for JSON docker run -it --rm -p 80:80 -v $PWD/config.json:/downlink/config.json -e DOWNLINK:ProxyRemoteFiles=true agc93/downlink:latest Note that extra -e argument? That adds the ProxyRemoteFiles variable to your Downlink configuration (and sets it to true ). Downlink will now automatically proxy remote files (from whatever storage backend you chose) and serve it back to the user directly from Downlink. Again, browse to the same address as earlier and you should receive the binary download, no redirect required! Tip You can mix and match configuration! You could add ProxyRemoteFiles to your YAML/JSON configuration file, or recreate the whole config file in environment variables, or anything in between. Notice how we didn't change a single thing about Hugo's downloads or releases? But now we can easily link directly to any version, platform or architecture. That's what Downlink is about!"
  },
  "doc/user/intro.html": {
    "href": "doc/user/intro.html",
    "title": "Downlink | Downlink",
    "keywords": "Downlink Introduction Downlink is a simple API used to create predictable, stable and consistent download links for software releases/projects. In short, Downlink lets you give a link to your end user like http://myapp.com/v1.2/windows/x64 and Downlink will return version 1.2 of your app for 64-bit Windows, regardless of where your app binaries/packages/installers/images/artifacts are actually stored. Downlink is an abstraction over your chosen release storage platform so your links are always dependable and predictable, even if you (or your chosen platform) changes how you store your app. Out of the box, Downlink supports serving packages from GitHub Releases (with a naming convention), Azure Storage, AWS S3 Storage, or the local filesystem of the Downlink server. Technology Downlink is built entirely using ASP.NET Core and is supported on Windows, Linux and macOS, including a pre-built Docker image. Getting Started To get started, check out the getting started guide for a quick demo, or check out the FAQ for common questions. Contributing This application is completely open-source and is published on GitHub . To get started contributing, check out the contributing guide and the developer guide ."
  },
  "doc/user/matching.html": {
    "href": "doc/user/matching.html",
    "title": "Version Matching | Downlink",
    "keywords": "Version Matching The process for going from a request, like /v1.2/windows/x64 to an actual file on your storage backend we refer to as \"version matching\". There's two methods of version matching that depends on your choice of backend: Match Strategies Each backend can make use of a match strategy to match a version request to a specific file on the backend. These match strategies are the more advanced method of version matching, but are also not portable between backends as they use the respective backends' underlying storage types. Currently, Downlink doesn't use many match strategies, but they are very helpful for extending and customising. Pattern Matchers Pattern matching is the much simpler alternative to match strategies, but has the benefit of being backend-agnostic, since it abstracts the domain-specific objects (i.e. release assets, block blobs etc) into a \"path\" that gets run through the pattern matcher. The first match is returned to the user. The main exception is the GitHub backend, which supports only the convention-driven GitHub-specific Flat strategy at this time. Compatibility Backend Azure AWS S3 GitHub Flat ✅ ✅ ✅* Hierarchical ✅ ✅ ❌ FlatVersion ✅ ✅ ❌ FlatPlatform ✅ ✅ ❌ Search ❌ ✅ ❌ Configuration As outlined in the individual backend's documentation, the convention is to use a MatchStrategy configuration key under the respective backend's section to control the version matching in use: { \"AzureStorage\": { \"MatchStrategy\": \"Hierarchical\" }, \"AWS\": { \"MatchStrategy\": \"FlatVersion\" } } AzureStorage: MatchStrategy: 'Hierarchical' AWS: MatchStrategy: 'FlatPlatform'"
  },
  "index.html": {
    "href": "index.html",
    "title": "Downlink | Downlink",
    "keywords": "Downlink Introduction Downlink is a simple API used to create predictable, stable and consistent download links for software releases/projects. It serves as an abstraction over your chosen release storage platform so your links are always dependable and predictable, even if you (or your chosen platform) changes how you store your app. Using this documentation: Click the tabs at the top of the page to navigate: User Documentation : General documentation Developer Reference : Full API documentation for developers"
  },
  "api/Downlink.S3.ServiceCollectionExtensions.html": {
    "href": "api/Downlink.S3.ServiceCollectionExtensions.html",
    "title": "Class ServiceCollectionExtensions | Downlink",
    "keywords": "Class ServiceCollectionExtensions Inheritance System.Object ServiceCollectionExtensions Namespace : Downlink.S3 Assembly : Downlink.S3.dll Syntax public static class ServiceCollectionExtensions : object Methods | Improve this Doc View Source AddS3Storage(IServiceCollection) Declaration public static IServiceCollection AddS3Storage(this IServiceCollection services) Parameters Type Name Description IServiceCollection services Returns Type Description IServiceCollection"
  },
  "api/Downlink.Storage.ServiceCollectionExtensions.html": {
    "href": "api/Downlink.Storage.ServiceCollectionExtensions.html",
    "title": "Class ServiceCollectionExtensions | Downlink",
    "keywords": "Class ServiceCollectionExtensions Inheritance System.Object ServiceCollectionExtensions Namespace : Downlink.Storage Assembly : Downlink.dll Syntax public static class ServiceCollectionExtensions : object Methods | Improve this Doc View Source AddFallbackStorage(IServiceCollection) Declaration public static IServiceCollection AddFallbackStorage(this IServiceCollection services) Parameters Type Name Description IServiceCollection services Returns Type Description IServiceCollection"
  },
  "api/Downlink.Storage.html": {
    "href": "api/Downlink.Storage.html",
    "title": "Namespace Downlink.Storage | Downlink",
    "keywords": "Namespace Downlink.Storage Classes NoneStorage ServiceCollectionExtensions"
  },
  "api/Downlink.html": {
    "href": "api/Downlink.html",
    "title": "Namespace Downlink | Downlink",
    "keywords": "Namespace Downlink Classes BuilderExtensions HostBuilderExtensions Program Startup StartupExtensions"
  },
  "api/Downlink.AzureStorage.AzureStorageExtensions.html": {
    "href": "api/Downlink.AzureStorage.AzureStorageExtensions.html",
    "title": "Class AzureStorageExtensions | Downlink",
    "keywords": "Class AzureStorageExtensions Inheritance System.Object AzureStorageExtensions Namespace : Downlink.AzureStorage Assembly : Downlink.AzureStorage.dll Syntax public static class AzureStorageExtensions : object Methods | Improve this Doc View Source ListBlobsAsync(CloudBlobContainer) Declaration public static Task<List<IListBlobItem>> ListBlobsAsync(this CloudBlobContainer container) Parameters Type Name Description CloudBlobContainer container Returns Type Description Task < List < IListBlobItem >> | Improve this Doc View Source PrepContainer(CloudBlobContainer) Declaration public static Task PrepContainer(this CloudBlobContainer container) Parameters Type Name Description CloudBlobContainer container Returns Type Description Task | Improve this Doc View Source ToSource(CloudBlockBlob, VersionSpec) Declaration public static IFileSource ToSource(this CloudBlockBlob blob, VersionSpec version) Parameters Type Name Description CloudBlockBlob blob VersionSpec version Returns Type Description IFileSource | Improve this Doc View Source ToSourceAsync(CloudBlockBlob, VersionSpec) Declaration public static Task<IFileSource> ToSourceAsync(this CloudBlockBlob blob, VersionSpec version) Parameters Type Name Description CloudBlockBlob blob VersionSpec version Returns Type Description Task < IFileSource >"
  },
  "api/Downlink.AzureStorage.AzureStorageFileSource.html": {
    "href": "api/Downlink.AzureStorage.AzureStorageFileSource.html",
    "title": "Class AzureStorageFileSource | Downlink",
    "keywords": "Class AzureStorageFileSource Inheritance System.Object AzureStorageFileSource Namespace : Downlink.AzureStorage Assembly : Downlink.AzureStorage.dll Syntax public class AzureStorageFileSource : object, IFileSource Properties | Improve this Doc View Source Available Declaration public bool Available { get; } Property Value Type Description System.Boolean | Improve this Doc View Source FileUri Declaration public Uri FileUri { get; } Property Value Type Description Uri | Improve this Doc View Source Metadata Declaration public FileMetadata Metadata { get; } Property Value Type Description FileMetadata Implements IFileSource.Metadata | Improve this Doc View Source Version Declaration public VersionSpec Version { get; set; } Property Value Type Description VersionSpec Implements IFileSource.Version Extension Methods ReflectionExtensions.IsAssignableTo<TTarget>(Object)"
  },
  "api/Downlink.AzureStorage.Strategies.html": {
    "href": "api/Downlink.AzureStorage.Strategies.html",
    "title": "Namespace Downlink.AzureStorage.Strategies | Downlink",
    "keywords": "Namespace Downlink.AzureStorage.Strategies Classes AzureMatchStrategy"
  },
  "api/Downlink.BuilderExtensions.html": {
    "href": "api/Downlink.BuilderExtensions.html",
    "title": "Class BuilderExtensions | Downlink",
    "keywords": "Class BuilderExtensions Inheritance System.Object BuilderExtensions Namespace : Downlink Assembly : Downlink.dll Syntax public static class BuilderExtensions : object"
  },
  "api/Downlink.Composition.IPluginLoader.html": {
    "href": "api/Downlink.Composition.IPluginLoader.html",
    "title": "Interface IPluginLoader | Downlink",
    "keywords": "Interface IPluginLoader Namespace : Downlink.Composition Assembly : Downlink.dll Syntax public interface IPluginLoader Methods | Improve this Doc View Source LoadPlugins(IDownlinkBuilder, IServiceProvider) Declaration void LoadPlugins(IDownlinkBuilder builder, IServiceProvider provider) Parameters Type Name Description IDownlinkBuilder builder IServiceProvider provider Extension Methods ReflectionExtensions.IsAssignableTo<TTarget>(Object)"
  },
  "api/Downlink.Composition.PluginLoader.html": {
    "href": "api/Downlink.Composition.PluginLoader.html",
    "title": "Class PluginLoader | Downlink",
    "keywords": "Class PluginLoader Inheritance System.Object PluginLoader Namespace : Downlink.Composition Assembly : Downlink.dll Syntax public class PluginLoader : object, IPluginLoader Constructors | Improve this Doc View Source PluginLoader(ILogger<PluginLoader>) Declaration public PluginLoader(ILogger<PluginLoader> logger) Parameters Type Name Description ILogger < PluginLoader > logger Methods | Improve this Doc View Source LoadPlugins(IDownlinkBuilder, IServiceProvider) Declaration public void LoadPlugins(IDownlinkBuilder builder, IServiceProvider provider) Parameters Type Name Description IDownlinkBuilder builder IServiceProvider provider Implements IPluginLoader.LoadPlugins(IDownlinkBuilder, IServiceProvider) Extension Methods ReflectionExtensions.IsAssignableTo<TTarget>(Object)"
  },
  "api/Downlink.Composition.html": {
    "href": "api/Downlink.Composition.html",
    "title": "Namespace Downlink.Composition | Downlink",
    "keywords": "Namespace Downlink.Composition Classes PluginLoader PluginScanner Interfaces IDownlinkPlugin IPluginLoader IPluginScanner"
  },
  "api/Downlink.Controllers.ApiController.html": {
    "href": "api/Downlink.Controllers.ApiController.html",
    "title": "Class ApiController | Downlink",
    "keywords": "Class ApiController Inheritance System.Object ApiController DownlinkController Namespace : Downlink.Controllers Assembly : Downlink.dll Syntax public class ApiController : Controller Constructors | Improve this Doc View Source ApiController(IMediator) Declaration protected ApiController(IMediator mediator) Parameters Type Name Description IMediator mediator Properties | Improve this Doc View Source Mediator Declaration protected IMediator Mediator { get; } Property Value Type Description IMediator Methods | Improve this Doc View Source Gone() Declaration protected IActionResult Gone() Returns Type Description IActionResult Extension Methods ReflectionExtensions.IsAssignableTo<TTarget>(Object)"
  },
  "api/Downlink.Core.CollectionExtensions.html": {
    "href": "api/Downlink.Core.CollectionExtensions.html",
    "title": "Class CollectionExtensions | Downlink",
    "keywords": "Class CollectionExtensions Inheritance System.Object CollectionExtensions Namespace : Downlink.Core Assembly : Downlink.Core.dll Syntax public static class CollectionExtensions : object Methods | Improve this Doc View Source GetFor(IEnumerable<IPatternMatcher>, String) Declaration public static IPatternMatcher GetFor(this IEnumerable<IPatternMatcher> patterns, string name) Parameters Type Name Description IEnumerable < IPatternMatcher > patterns System.String name Returns Type Description IPatternMatcher | Improve this Doc View Source GetFor<T, TObject>(IEnumerable<T>, String) Declaration public static T GetFor<T, TObject>(this IEnumerable<T> strategies, string name)where T : IMatchStrategy<TObject> where TObject : class Parameters Type Name Description IEnumerable <T> strategies System.String name Returns Type Description T Type Parameters Name Description T TObject | Improve this Doc View Source GetStorageFor(IEnumerable<IRemoteStorage>, String) Declaration public static IRemoteStorage GetStorageFor(this IEnumerable<IRemoteStorage> storage, string name) Parameters Type Name Description IEnumerable < IRemoteStorage > storage System.String name Returns Type Description IRemoteStorage"
  },
  "api/Downlink.Core.Diagnostics.ArchitectureNotFoundException.html": {
    "href": "api/Downlink.Core.Diagnostics.ArchitectureNotFoundException.html",
    "title": "Class ArchitectureNotFoundException | Downlink",
    "keywords": "Class ArchitectureNotFoundException Inheritance System.Object NotFoundException ArchitectureNotFoundException Namespace : Downlink.Core.Diagnostics Assembly : Downlink.Core.dll Syntax public class ArchitectureNotFoundException : NotFoundException Constructors | Improve this Doc View Source ArchitectureNotFoundException() Declaration public ArchitectureNotFoundException() | Improve this Doc View Source ArchitectureNotFoundException(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) Declaration protected ArchitectureNotFoundException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) Parameters Type Name Description System.Runtime.Serialization.SerializationInfo info System.Runtime.Serialization.StreamingContext context | Improve this Doc View Source ArchitectureNotFoundException(String) Declaration public ArchitectureNotFoundException(string message) Parameters Type Name Description System.String message | Improve this Doc View Source ArchitectureNotFoundException(String, System.Exception) Declaration public ArchitectureNotFoundException(string message, System.Exception inner) Parameters Type Name Description System.String message System.Exception inner Extension Methods ReflectionExtensions.IsAssignableTo<TTarget>(Object)"
  },
  "api/Downlink.Core.Diagnostics.VersionNotFoundException.html": {
    "href": "api/Downlink.Core.Diagnostics.VersionNotFoundException.html",
    "title": "Class VersionNotFoundException | Downlink",
    "keywords": "Class VersionNotFoundException Inheritance System.Object NotFoundException VersionNotFoundException Namespace : Downlink.Core.Diagnostics Assembly : Downlink.Core.dll Syntax public class VersionNotFoundException : NotFoundException Constructors | Improve this Doc View Source VersionNotFoundException() Declaration public VersionNotFoundException() | Improve this Doc View Source VersionNotFoundException(String) Declaration public VersionNotFoundException(string message) Parameters Type Name Description System.String message | Improve this Doc View Source VersionNotFoundException(String, System.Exception) Declaration public VersionNotFoundException(string message, System.Exception inner) Parameters Type Name Description System.String message System.Exception inner Extension Methods ReflectionExtensions.IsAssignableTo<TTarget>(Object)"
  }
}